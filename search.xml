<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Nexus OSS3创建npm 私服]]></title>
      <url>http://wendyeq.me/2016/11/24/npm-registry-in-nexus-oss-3/</url>
      <content type="html"><![CDATA[<img src="/2016/11/24/npm-registry-in-nexus-oss-3/npm.jpeg" alt="npm" title="npm">
<p>题图来自<a href="https://www.npmjs.com" target="_blank" rel="external">npmjs.com</a></p>
<h2 id="npm-简介"><a href="#npm-简介" class="headerlink" title="npm 简介"></a>npm 简介</h2><p><a href="https://www.npmjs.com" target="_blank" rel="external">npm</a> 是 <a href="https://nodejs.org" target="_blank" rel="external">nodejs</a> 的包管理工具。有包管理工具的语言和系统才会更容易使用和流行。比如<a href="https://www.ubuntu.com/" target="_blank" rel="external">Ubuntu</a> 的apt-get，<a href="https://getfedora.org/" target="_blank" rel="external">Fedora</a> 的yum，<a href="https://golang.org/" target="_blank" rel="external">Go</a> 语言的go get。</p>
<ol>
<li>用户可以通过npm 命令从npm服务器下载第三方包和程序到本地。</li>
<li>用户可以将自己编写的包或程序上传到npm服务器供别人下载使用。</li>
</ol>
<p><a href="https://hexo.io" target="_blank" rel="external">Hexo</a> 博客程序就是通过npm 安装的。</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-<span class="keyword">cli</span> -g</div></pre></td></tr></table></figure>
<p>由于国内的网络环境比较有特色，很多时候通过npm的官方服务器下载很慢或者下载失败，所以经常看到有人在找npm 镜像，当然也有人搭建npm 镜像。比较出名且速度快的是<a href="http://npm.taobao.org/" target="_blank" rel="external">淘宝npm 镜像</a>，号称10分钟同步一次。<br>在前几天已经用<a href="/2016/11/20/nexus-oss-3-in-docker/">Docker 搭建Nexus OSS3私服</a>，而且Nexus3是支持npm的，所以就简单的利用Nexus3创建npm 私服。<br><a id="more"></a></p>
<h2 id="创建npm-私服"><a href="#创建npm-私服" class="headerlink" title="创建npm 私服"></a>创建npm 私服</h2><p>打开Nexus，在Nexus 的设置中点击Repositories，然后点击Create repositry按钮。<br><img src="/2016/11/24/npm-registry-in-nexus-oss-3/step1.jpg" alt="step1" title="step1"></p>
<p>在Repositry 中可以创建三种类型的仓库，分别是group、hosted和proxy。<br>group 指的是仓库组，可以包括hosted 和proxy的仓库。<br>hosted 是指自己的私有仓库，可以上传私有代码到上面。<br>proxy 就是代理镜像仓库。<br>一般情况下无论是Maven、pypi 还是npm，这3种类型的仓库都会分别建一个，然后用的时候指向group 仓库。<br>创建的顺序是先hosted 或proxy ，最后才是group，因为group要包括hosted 和proxy。<br><img src="/2016/11/24/npm-registry-in-nexus-oss-3/step2.jpg" alt="step2" title="step2"></p>
<h3 id="创建hosted"><a href="#创建hosted" class="headerlink" title="创建hosted"></a>创建hosted</h3><p>hosted仓库只需要填上仓库名即可，其它的默认。因为只有一个Blob Stores 所以不需要选择，也可以按类型每一类都建一个Blob Store。<br><img src="/2016/11/24/npm-registry-in-nexus-oss-3/step3.jpg" alt="step3" title="step3"></p>
<h3 id="创建proxy"><a href="#创建proxy" class="headerlink" title="创建proxy"></a>创建proxy</h3><p>proxy仓库不仅需要填名字而且需要填上代理服务器地址，这里填淘宝的npm地址<code>https://registry.npm.taobao.org</code>。<br><img src="/2016/11/24/npm-registry-in-nexus-oss-3/step4.jpg" alt="step4" title="step4"></p>
<h3 id="创建group"><a href="#创建group" class="headerlink" title="创建group"></a>创建group</h3><p>填上仓库名，把刚刚创建的两个仓库移到右边的框即可。<br><img src="/2016/11/24/npm-registry-in-nexus-oss-3/step5.png" alt="step5" title="step5"></p>
<h2 id="npm-私服使用"><a href="#npm-私服使用" class="headerlink" title="npm 私服使用"></a>npm 私服使用</h2><p>经过以上的几个步骤npm 私服就创建完毕啦，私服使用起来也很简单，跟使用镜像一样。<br>在用户的主目录下的.vimrc文件中添加<code>registry = http://172.18.2.40:8081/repository/w-npm-group/</code>。Windows的用户主目录是C:\Users\用户名，比如我的就是C:\Users\wendyeq，MacOS和Linux直接在终端执行<code>cd ~</code>即可，没有这个文件的话就新建一个。<br><img src="/2016/11/24/npm-registry-in-nexus-oss-3/npmrc.png" alt="npmrc" title="npmrc"></p>
<p><code>http://172.18.2.40:8081/repository/w-npm-group/</code>就是刚刚创建group的URL，换为<code>https://registry.npm.taobao.org</code> 就是直接使用淘宝镜像啦。<br><img src="/2016/11/24/npm-registry-in-nexus-oss-3/w-npm-group.png" alt="w-npm-group" title="w-npm-group"></p>
<p>最后用<code>npm -loglevel info install mysql</code>测试验证包是否从npm私服下载。<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">npm</span> -loglevel info install mysql</div><div class="line"><span class="built_in">npm</span> info <span class="literal">it</span> worked <span class="keyword">if</span> <span class="literal">it</span> ends <span class="keyword">with</span> ok</div><div class="line"><span class="built_in">npm</span> info using <span class="built_in">npm</span>@<span class="number">3.10</span>.<span class="number">9</span></div><div class="line"><span class="built_in">npm</span> info using node@v7.<span class="number">1.0</span></div><div class="line"><span class="built_in">npm</span> http request GET http:<span class="regexp">//172.18.2.40:8081/repository/w-npm-group/mysql</span></div><div class="line">npm http 200 http://<span class="number">172.18</span>.<span class="number">2.40</span>:<span class="number">8081</span>/repository/w-<span class="built_in">npm</span>-group/mysql</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker 入门简介]]></title>
      <url>http://wendyeq.me/2016/11/22/docker-introduction/</url>
      <content type="html"><![CDATA[<h2 id="Docker优点"><a href="#Docker优点" class="headerlink" title="Docker优点"></a>Docker优点</h2><p>在<a href="/2016/11/17/docker-registry-v2/">Docker 安装与Registry V2私有仓库搭建</a> 中已经简单提过Docker。<br>Docker 的优点很多：</p>
<ol>
<li>高效利用系统资源</li>
<li>更快的启动速度</li>
<li>一致的运行环境</li>
<li>持续交付和部署</li>
<li>方便的迁移</li>
<li>轻松的维护和扩展</li>
<li>采用我喜欢的Go语言进行开发</li>
</ol>
<h2 id="Docker基础"><a href="#Docker基础" class="headerlink" title="Docker基础"></a>Docker基础</h2><p>Docker 3大基础概念：镜像、容器、仓库。</p>
<a id="more"></a>
<h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>Docker镜像是一个特殊的文件系统，包括容器运行时的程序、库、资源和配置文件，不包含动态数据。Docker 采用<a href="https://en.wikipedia.org/wiki/UnionFS" target="_blank" rel="external">UnionFS</a> 构建镜像。镜像的构建是一层层的，每一层构建完就不会发生改变，也就是说镜像的内容在构建之后不会被改变。</p>
<p>对镜像的操作通常有以下几种：</p>
<p><strong>获取镜像</strong><br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">docker</span> pull [选项] [<span class="type">Docker</span> <span class="type">Registry</span>地址]&lt;仓库名&gt;:&lt;标签&gt;</div><div class="line"><span class="title">docker</span> pull <span class="number">172.18</span><span class="number">.2</span><span class="number">.40</span>:<span class="number">5000</span>/sona<span class="keyword">type</span>/nexus3:3.1.0</div><div class="line"><span class="title">docker</span> pull sona<span class="keyword">type</span>/nexus3</div><div class="line"><span class="title">docker</span> pull registry</div></pre></td></tr></table></figure></p>
<p><em>172.18.2.40:5000</em> 是Docker Registry地址，没有这个地址则默认是<a href="https://hub.docker.com" target="_blank" rel="external">hub.docker.com</a><br><em>sonatype/nexus3</em> 是仓库名，仓库名一般是“用户名/软件名”组成。若只有软件名，则默认用户名是library。<br><em>3.1.0</em> 是标签，也叫版本号，不指定标签则默认是latest，最好还是指定标签，更直观的知道用的是那个版本。</p>
<p><strong>运行镜像</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p <span class="number">8080</span>:<span class="number">8081</span> -v <span class="regexp">/data/</span><span class="string">nexus:</span><span class="regexp">/nexus-data --name nexus 172.18.2.40:5000/</span>sonatype/<span class="string">nexus3:</span><span class="number">3.1</span><span class="number">.0</span></div></pre></td></tr></table></figure></p>
<p><em>-d</em> 指的是后台运行<br><em>-p 8080:8081</em> 指把容器8081端口映射到主机8080端口，格式为“主机端口:容器端口”<br><em>-v /data/nexus:/nexus-data</em> 把容器里的/nexus-data 目录，挂载到主机的/data/nexus目录。<br><em>–name nexus</em> 对容器命名<br><em>172.18.2.40:5000/sonatype/nexus3:3.1.0</em> 镜像名<br>运行镜像之后就变为容器啦。</p>
<p><strong>列出镜像</strong><br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">docker images</span></div></pre></td></tr></table></figure></p>
<p><strong>创建镜像</strong><br>创建镜像有2种方式，一种是commit，另一种是Dockerfile。</p>
<ol>
<li>下载已有镜像，添加内容，然后commit，<code>docker commit -m “message” 容器id 仓库:标签</code>。</li>
<li>利用Dockerfile创建<code>docker build -t=“仓库:标签”</code>，一个镜像不能超过127层。</li>
</ol>
<p><strong>删除镜像</strong><br>没有被使用的镜像才可以被删除<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">docker</span> rmi 仓库:标签</div></pre></td></tr></table></figure></p>
<p>删除没有标签的本地镜像<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi $(docker images -<span class="selector-tag">q</span> -f <span class="string">"dangling=true”)</span></div></pre></td></tr></table></figure></p>
<p><strong>导入镜像</strong><br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">cat</span> ubuntu<span class="number">-16.10</span>-x86_64-minimal.tar.gz | docker <span class="keyword">import</span> - ubuntu:16.10</div></pre></td></tr></table></figure></p>
<p><strong>上传镜像</strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">push</span> <span class="number">172.18</span><span class="meta">.2</span><span class="meta">.40</span>:<span class="number">5000</span>/sonatype/nexus3:<span class="number">3.1</span><span class="meta">.0</span></div></pre></td></tr></table></figure></p>
<p><strong>保存和加载镜像</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker save -o xxx<span class="selector-class">.tar</span> 仓库:标签</div><div class="line">docker load —<span class="selector-tag">input</span> xxx.tar</div></pre></td></tr></table></figure></p>
<h3 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h3><p>容器的实质是进程，进程运行在一个隔离的环境里。<br>容器运行是产生的数据如果没有映射出来的话，将会在容器消亡的时候消亡。<br>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷或者绑定宿主目录。</p>
<p><strong>创建并启动</strong><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span><span class="bash"></span></div></pre></td></tr></table></figure></p>
<p>跟在镜像中说明的一样，从镜像新建并启动容器。</p>
<p><strong>启动已停止的容器</strong><br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="literal">start</span> 容器名</div></pre></td></tr></table></figure></p>
<p><strong>停止容器</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">stop</span> 容器名</div></pre></td></tr></table></figure></p>
<p><strong>重启容器</strong><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">restart</span> 容器名</div></pre></td></tr></table></figure></p>
<p><strong>打印容器启动日志</strong><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">docker</span> logs 容器名</div></pre></td></tr></table></figure></p>
<p><strong>进入容器</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">attach</span> 容器名</div></pre></td></tr></table></figure></p>
<p><strong>导出容器</strong><br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">docker</span> <span class="keyword">export</span> 容器名  &gt; xxx.tar</div><div class="line"><span class="title">cat</span> xxx.tar | docker <span class="keyword">import</span> - xx/xxx:v1.0</div></pre></td></tr></table></figure></p>
<p>docker import 将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），可以重新指定标签等元数据信息。<br>docker load 将保存完整记录，体积要大，不能指定标签等元数据信息。</p>
<p><strong>删除容器</strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">rm</span> 容器名 <span class="comment">//删除停止状态的容器，删除运行状态的要加 -f 参数。</span></div><div class="line"></div><div class="line">docker <span class="keyword">rm</span> <span class="variable">$&#123;docker</span> ps -a -q&#125; <span class="comment">//删除所有停止状态的容器</span></div></pre></td></tr></table></figure></p>
<h3 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h3><p>Registry包含多个仓库，每个仓库包含多个标签，每个标签对应一个镜像。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker tag wendyeq/tomcat8 <span class="number">172.18</span><span class="meta">.2</span><span class="meta">.40</span>:<span class="number">5000</span>/wendyeq/tomcat8:<span class="number">1.0</span></div><div class="line">docker <span class="keyword">push</span> <span class="number">172.18</span><span class="meta">.2</span><span class="meta">.40</span>:<span class="number">5000</span>/wendyeq/tomcat8:<span class="number">1.0</span></div><div class="line">docker pull <span class="number">172.18</span><span class="meta">.2</span><span class="meta">.40</span>:<span class="number">5000</span>/wendyeq/tomcat8:<span class="number">1.0</span></div></pre></td></tr></table></figure></p>
<h2 id="MORE"><a href="#MORE" class="headerlink" title="MORE"></a>MORE</h2><p>更多的内容请使用神器<code>--help</code><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker <span class="comment">--help</span></div><div class="line">docker <span class="built_in">run</span> <span class="comment">--help</span></div><div class="line">docker start <span class="comment">--help</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>或者查看<a href="https://docs.docker.com/engine/reference/commandline/cli/" target="_blank" rel="external">Docker命令行文档</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker 搭建Nexus OSS3私服]]></title>
      <url>http://wendyeq.me/2016/11/20/nexus-oss-3-in-docker/</url>
      <content type="html"><![CDATA[<h2 id="Nexus-简介"><a href="#Nexus-简介" class="headerlink" title="Nexus 简介"></a>Nexus 简介</h2><p>Nexus 是个仓库管理器，目前主要分2大版本：2.X 和 3.X。2.X 主要支持的格式是Maven、P2、OBR、Yum。3.X主要支持的是Docker、NuGet、npm、Bower、Pypi、Ruby Gems，当然也支持构建工具Maven 和Gradle。Nexus 3只支持Oracle jdk8，不支持其它版本的JDK，比如OpenJDK。更多内容可以查看<a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="external">Nexus下载页面</a>。</p>
<h2 id="Nexus-安装"><a href="#Nexus-安装" class="headerlink" title="Nexus 安装"></a>Nexus 安装</h2><p>本次安装的Nexus OSS的版本是3.1.0。<br>Nexus3 Docker安装脚本地址是<a href="https://github.com/sonatype/docker-nexus3" target="_blank" rel="external">docker-nexus3</a>。其实安装起来比里面的描述要简单一些。先把镜像拉取下来，然后直接run 就可以了。但是因为当时操作的时候，拉取镜像的机器与实际安装的机器不是同一台，所以要把镜像推送的registry 仓库，然后再运行。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker pull sonatype/nexus3:<span class="number">3.1</span><span class="meta">.0</span></div><div class="line">docker tag sonatype/nexus3:<span class="number">3.1</span><span class="meta">.0</span> <span class="number">172.18</span><span class="meta">.2</span><span class="meta">.40</span>:<span class="number">5000</span>/sonatype/nexus3:<span class="number">3.1</span><span class="meta">.0</span></div><div class="line">docker <span class="keyword">push</span> <span class="number">172.18</span><span class="meta">.2</span><span class="meta">.40</span>:<span class="number">5000</span>/sonatype/nexus3:<span class="number">3.1</span><span class="meta">.0</span></div></pre></td></tr></table></figure></p>
<p>创建存储文件目录，并修改目录拥有者，容器里面运行的uid 是 200.<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">mkdir</span> /<span class="class"><span class="keyword">data</span>/nexus &amp;&amp; chown -<span class="type">R</span> 200 /<span class="keyword">data</span>/nexus</span></div><div class="line"><span class="title">docker</span> run -d -p <span class="number">8081</span>:<span class="number">8081</span> -v /<span class="class"><span class="keyword">data</span>/nexus:/nexus-<span class="keyword">data</span> <span class="comment">--name nexus 172.18.2.40:5000/sonatype/nexus3:3.1.0</span></span></div></pre></td></tr></table></figure></p>
<p>就是这么简单就安装好了，如果不能访问的话看看是不是iptable 没有开放8081端口。<br>通过<code>docker logs nexus</code> 可以查看启动日志。</p>
<h2 id="Nexus-使用"><a href="#Nexus-使用" class="headerlink" title="Nexus 使用"></a>Nexus 使用</h2><p>安装好之后默认的用户名／密码是admin／admin123，需要自己修改密码。<br>默认的maven-central 使用的是<a href="https://repo1.maven.org/maven2/" target="_blank" rel="external">https://repo1.maven.org/maven2/</a> 地址，速度上没有UK 的快，所以修改为<a href="http://uk.maven.org/maven2/" target="_blank" rel="external">http://uk.maven.org/maven2/</a>。<br><img src="/2016/11/20/nexus-oss-3-in-docker/repository.png" alt="Repository" title="Repository"></p>
<p>因为Gradle和Maven都有在用，Gradle是可以直接使用Maven的仓库的，所以下面以Gradle举例。修改build.gradle文件里面的repositories。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">repositories</span> &#123;</div><div class="line">    <span class="section">maven</span> &#123;</div><div class="line">        <span class="attribute">url</span> <span class="string">'http://172.18.2.40:8081/repository/maven-public/'</span></div><div class="line">    &#125;</div><div class="line">    jcenter()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实国内还是有阿里云的Nexus这种比较快的仓库<a href="http://maven.aliyun.com/nexus/content/groups/public/" target="_blank" rel="external">http://maven.aliyun.com/nexus/content/groups/public/</a>，但是一些私包不能上传到上面，只能自己搭建一个私服。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker 安装与Registry V2私有仓库搭建]]></title>
      <url>http://wendyeq.me/2016/11/17/docker-registry-v2/</url>
      <content type="html"><![CDATA[<p>Docker 是一个开源的容器引擎，可以让开发者把应用以及依赖打包到一个可移植的容器中。Docker 采用Go语言编写，当时学习Go语言的时候已经知道这个神器，但是一直没有合适的场景正式使用，现在机会来啦。</p>
<p>Registry 是Docker 镜像的仓库，使用Registry 能搭建私有的Docker仓库，方便分发自定义镜像。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>本文的内容在以下版本中测试通过，不同的版本可能存在不同的地方，以下内容仅供参考。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[root@CentOS72-<span class="number">40</span> /]<span class="comment"># cat /etc/centos-release</span></div><div class="line">CentOS Linux release <span class="number">7.2</span>.<span class="number">1511</span> (Core)</div><div class="line"></div><div class="line">[root@CentOS72-<span class="number">40</span> /]<span class="comment"># docker version</span></div><div class="line">Client:</div><div class="line"> <span class="keyword">Version</span>:      <span class="number">1.12</span>.<span class="number">3</span></div><div class="line"> API <span class="keyword">version</span>:  <span class="number">1.24</span></div><div class="line"> Go <span class="keyword">version</span>:   go1.<span class="number">6.3</span></div><div class="line"> Git commit:   <span class="number">6</span>b644ec</div><div class="line"> Built:</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> <span class="keyword">Version</span>:      <span class="number">1.12</span>.<span class="number">3</span></div><div class="line"> API <span class="keyword">version</span>:  <span class="number">1.24</span></div><div class="line"> Go <span class="keyword">version</span>:   go1.<span class="number">6.3</span></div><div class="line"> Git commit:   <span class="number">6</span>b644ec</div><div class="line"> Built:</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"></div><div class="line">[root@CentOS72-<span class="number">40</span> /]<span class="comment"># docker images registry</span></div><div class="line"> REPOSITORY          <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             SIZE</div><div class="line"> registry            <span class="number">2.5</span>.<span class="number">1</span>               c9bd19d022f6        <span class="number">4</span> weeks ago         <span class="number">33.27</span> MB</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><p>安装Docker 需要内核是3.10 以上64位的Linux 系统。查看Linux 内核版本，CentOS7.2是没问题的。（现在Mac 和 Windows 都可以安装Docker）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@CentOS72-40 ~]</span># <span class="selector-tag">uname</span> <span class="selector-tag">-r</span></div><div class="line">3<span class="selector-class">.10</span><span class="selector-class">.0-327</span><span class="selector-class">.36</span><span class="selector-class">.3</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span></div></pre></td></tr></table></figure></p>
<p>CentOS 7 之后的默认防火墙是firewall，习惯使用iptables 做防火墙，所以还是修改为iptables 做防火墙。<br>停止firewall ，然后禁止firewall 开机启动。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@CentOS72</span><span class="number">-40</span> ~]<span class="meta"># systemctl stop firewalld</span></div><div class="line">[root<span class="symbol">@CentOS72</span><span class="number">-40</span> ~]<span class="meta"># systemctl disable firewalld</span></div></pre></td></tr></table></figure></p>
<p>检查iptables 的状态，若没有安装iptables 服务则需要安装iptables-services。<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@CentOS72-40 ~]<span class="comment"># systemctl status iptables</span></div><div class="line">· iptables.service</div><div class="line">   Loaded:<span class="built_in"> not-found </span>(Reason: No such file<span class="built_in"> or </span>directory)</div><div class="line">   Active: inactive (dead)</div><div class="line"></div><div class="line">[root@CentOS72-40 ~]<span class="comment"># yum install iptables-services</span></div></pre></td></tr></table></figure></p>
<p>编辑iptables 防火墙文件，开放22和5000端口（5000端口供Registry对外提供服务）。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@CentOS72-<span class="number">40</span> ~]<span class="comment"># vim /etc/sysconfig/iptables</span></div><div class="line"></div><div class="line"><span class="comment"># sample configuration for iptables service</span></div><div class="line"><span class="comment"># you can edit this manually or use system-config-firewall</span></div><div class="line"><span class="comment"># please do not ask us to add additional ports/services to this default configuration</span></div><div class="line">*filter</div><div class="line">:INPUT ACCEPT [<span class="number">0</span>:<span class="number">0</span>]</div><div class="line">:FORWARD ACCEPT [<span class="number">0</span>:<span class="number">0</span>]</div><div class="line">:OUTPUT ACCEPT [<span class="number">0</span>:<span class="number">0</span>]</div><div class="line">-A INPUT -m <span class="keyword">state</span> --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">-A INPUT -p icmp -j ACCEPT</div><div class="line">-A INPUT -i lo -j ACCEPT</div><div class="line">-A INPUT -p tcp -m <span class="keyword">state</span> --state NEW -m tcp --dport <span class="number">22</span> -j ACCEPT</div><div class="line">-A INPUT -p tcp -m <span class="keyword">state</span> --state NEW -m tcp --dport <span class="number">5000</span> -j ACCEPT</div><div class="line"></div><div class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</div><div class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</div><div class="line">COMMIT</div></pre></td></tr></table></figure></p>
<p>设置iptables 防火墙开机启动，启动防火墙使更改的配置生效。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@CentOS72</span><span class="number">-40</span> ~]<span class="meta"># systemctl enable iptables</span></div><div class="line">[root<span class="symbol">@CentOS72</span><span class="number">-40</span> ~]<span class="meta"># systemctl start iptables</span></div></pre></td></tr></table></figure></p>
<p>创建Docker 的yum 的仓库。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root<span class="variable">@CentOS72</span>-<span class="number">40</span> ~]<span class="comment"># tee /etc/yum.repos.d/docker.repo &lt;&lt;-'EOF'</span></div><div class="line">[dockerrepo]</div><div class="line">name=Docker Repository</div><div class="line">baseurl=<span class="symbol">https:</span>/<span class="regexp">/yum.dockerproject.org/repo</span><span class="regexp">/main/centos</span><span class="regexp">/7/</span></div><div class="line">enabled=<span class="number">1</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">https:</span>/<span class="regexp">/yum.dockerproject.org/gpg</span></div><div class="line">EOF</div></pre></td></tr></table></figure></p>
<p>安装docker-engine 会自动安装依赖 docker-engine-selinux。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@CentOS72</span><span class="number">-40</span> ~]<span class="meta"># yum install docker-engine</span></div></pre></td></tr></table></figure></p>
<p>设置开机启动docker，然后启动docker。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@CentOS72</span><span class="number">-40</span> ~]<span class="meta"># systemctl enable docker</span></div><div class="line">[root<span class="symbol">@CentOS72</span><span class="number">-40</span> ~]<span class="meta"># systemctl start docker</span></div></pre></td></tr></table></figure></p>
<p>安装完docker之后将会发现创建docker0网卡。<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@CentOS72-40 /]<span class="comment"># ifconfig</span></div><div class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 0.0.0.0</div><div class="line">        ether 02:42:2b:79:c2:73  txqueuelen<span class="number"> 0 </span> (Ethernet)</div><div class="line">        RX packets<span class="number"> 0 </span> bytes<span class="number"> 0 </span>(0.0 B)</div><div class="line">        RX errors<span class="number"> 0 </span> dropped<span class="number"> 0 </span> overruns<span class="number"> 0 </span> frame 0</div><div class="line">        TX packets<span class="number"> 0 </span> bytes<span class="number"> 0 </span>(0.0 B)</div><div class="line">        TX errors<span class="number"> 0 </span> dropped<span class="number"> 0 </span>overruns<span class="number"> 0 </span> carrier<span class="number"> 0 </span> collisions 0</div></pre></td></tr></table></figure></p>
<h2 id="配置Registry"><a href="#配置Registry" class="headerlink" title="配置Registry"></a>配置Registry</h2><p>拉取2.5.1版本的Registry 镜像。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@CentOS72</span><span class="number">-40</span> /]<span class="meta"># docker pull registry:2.5.1</span></div></pre></td></tr></table></figure></p>
<p>启动Registry镜像。根据Registry的文档把/tmp/registry-dev 目录映射出来是有问题的，真正的数据不是存储再这个目录。不知道是不新版的存在这个目录，反正2.5.1版的Registry 数据不是保存在这里，进入容器发现真正存储镜像的时在/var/lib/registry 目录，所以把这个目录映射出来。（跟着官方文档居然也走不通，郁闷，会不会是官方故意挖个坑让大家踩的呢）<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="meta">@CentOS</span>72<span class="number">-40</span> <span class="regexp">/]# docker run -d -p 5000:5000 -v /</span>data<span class="regexp">/registry:/</span>var<span class="regexp">/lib/</span>registry --name registry <span class="string">registry:</span><span class="number">2.5</span><span class="number">.1</span></div></pre></td></tr></table></figure></p>
<p> 打开<a href="http://172.18.2.40:5000/v2/_catalog" target="_blank" rel="external">http://172.18.2.40:5000/v2/_catalog</a> 验证是否安装成功。</p>
<p> 若是启用iptables的时候没有放开5000端口，在registry 运行的时候再放开。之后停了registry 重新打开registry 就会有下面的错误。不仅仅是Registry这个容器存在这个问题，所有容器的在运行中，主机的iptables 被修改过，停了容器再启动都会有这个问题。目前没有找到好的解决版本，但是重新启动docker 服务 <code>systemclt restart docker</code> 可以临时解决这个问题。<br> <figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error </span>response from daemon: driver failed programming external connectivity on endpoint registry (4b748e54bb59d8bfe1f1bd961c6f0fcfbd8ec94c75c5d4880134bd2a453b0d51): iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 5000 -j DNAT --to-destination 172.17.0.2:5000 ! -i docker0: iptables: No chain/target/match by that name.</div><div class="line"> (exit status 1)</div></pre></td></tr></table></figure></p>
<h2 id="使用Registry"><a href="#使用Registry" class="headerlink" title="使用Registry"></a>使用Registry</h2><p>对已经存在的镜像<code>wendyeq/tomcat8</code> 打上带Registry地址的tag，版本号位1.0。然后推送到Registry，发现推送不了，原因是Registry V2采用https协议。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@M-CentOS72-<span class="number">36</span> ~]# docker tag wendyeq/tomcat8 <span class="number">172.18</span><span class="meta">.2</span><span class="meta">.40</span>:<span class="number">5000</span>/wendyeq/tomcat8:<span class="number">1.0</span></div><div class="line">[root@M-CentOS72-<span class="number">36</span> ~]# docker <span class="keyword">push</span> <span class="number">172.18</span><span class="meta">.2</span><span class="meta">.40</span>:<span class="number">5000</span>/wendyeq/tomcat8:<span class="number">1.0</span></div><div class="line">The <span class="keyword">push</span> refers to a repository [<span class="number">172.18</span><span class="meta">.2</span><span class="meta">.40</span>:<span class="number">5000</span>/wendyeq/tomcat8]</div><div class="line">Get https://<span class="number">172.18</span><span class="meta">.2</span><span class="meta">.40</span>:<span class="number">5000</span>/v1/_ping: http: server gave HTTP response to HTTPS client</div></pre></td></tr></table></figure></p>
<p>解决这个问题的最简单方式是修改docker的启动脚本，添加<code>-H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock --insecure-registry 172.18.2.40:5000</code> 内容。<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@M-CentOS72-<span class="number">36</span> ~]# vim /usr/lib/systemd/system/docker.service</div><div class="line"></div><div class="line">[Service]</div><div class="line"><span class="keyword">Type</span>=<span class="keyword">notify</span></div><div class="line"># the <span class="keyword">default</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">to</span> use systemd <span class="keyword">for</span> cgroups because the <span class="keyword">delegate</span> issues still</div><div class="line"># exists <span class="keyword">and</span> systemd currently does <span class="keyword">not</span> support the cgroup feature <span class="keyword">set</span> required</div><div class="line"># <span class="keyword">for</span> containers run <span class="keyword">by</span> docker</div><div class="line">ExecStart=/usr/bin/dockerd -H tcp:<span class="comment">//127.0.0.1:2375 -H unix:///var/run/docker.sock --insecure-registry 172.18.2.40:5000</span></div></pre></td></tr></table></figure></p>
<p>修改完之后就可以推送到Registry 的私有仓库啦。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@M</span>-CentOS72<span class="number">-36</span> ~]<span class="meta"># systemctl start docker</span></div><div class="line">Warning: docker.service changed on disk. <span class="built_in">Run</span> <span class="string">'systemctl daemon-reload'</span> <span class="keyword">to</span> reload units.</div><div class="line">[root<span class="symbol">@M</span>-CentOS72<span class="number">-36</span> ~]<span class="meta"># systemctl daemon-reload</span></div><div class="line">[root<span class="symbol">@M</span>-CentOS72<span class="number">-36</span> ~]<span class="meta"># systemctl start docker</span></div><div class="line">[root<span class="symbol">@M</span>-CentOS72<span class="number">-36</span> ~]<span class="meta"># docker push 172.18.2.40:5000/wendyeq/tomcat8</span></div><div class="line">The push refers <span class="keyword">to</span> a repository [<span class="number">172.18</span><span class="number">.2</span><span class="number">.40</span>:<span class="number">5000</span>/wendyeq/tomcat8]</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Docker 和 Registry 的安装都比较简单，但是Registry查找镜像好麻烦，特别是查看版本号，要好好研究一下Registry 的文档才行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《从0到1》读书笔记]]></title>
      <url>http://wendyeq.me/2016/08/09/zero-to-one/</url>
      <content type="html"><![CDATA[<p>最近花了几天时间把《从0到1》看完了一遍，里面有几个问题令人印象深刻。书中描述的很多内容其实都在职场中遇到，但是自己没有总结出来。《从0到1》把很多商业经验，特别是初闯企业的商业经验都终结出来，每一个有志于创业的人都应读一读。</p>
<p>几个值得深思的问题：</p>
<p>1、在什么重要问题上你与其他人有不同看法？</p>
<p>2、工程问题：你的技术具有突破性，而不紧急是稍有改进码？</p>
<p>3、时机问题：现在开创事业，时机合适吗？</p>
<p>4、垄断问题：开创之初，是在一个小市场抢占大份额吗？</p>
<p>5、人员问题：你有合适的团队吗？</p>
<p>6、销售问题：除了创造产品，你有没有办法销售产品？</p>
<p>7、持久问题：未来10年或20年，你能保住自己的市场地位吗？</p>
<p>8、秘密问题：你有没有找到一个其他人没有发现的独特机会？</p>
<p>《从0到1》读书笔记思维导图（逆时针阅读）：</p>
<a id="more"></a>
<img src="/2016/08/09/zero-to-one/zero-to-one-mind.png" alt="Mind" title="Mind">]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用Swift开发Xcode插件]]></title>
      <url>http://wendyeq.me/2016/01/26/writing-xcode-plugin-in-swift/</url>
      <content type="html"><![CDATA[<p>最近发现Xcode上有个好玩的插件<a href="https://github.com/poboke/Miku" target="_blank" rel="external">Miku</a>，敲代码时Miku会唱歌和跳舞，停止敲代码时Miku的动作就会慢下来，它是<a href="https://github.com/sunqibuhuake/atom-miku" target="_blank" rel="external">atom-miku</a>的盗版。</p>
<p>Miku插件是使用Objective-C开发，可惜不怎么懂objc，就寻思着用Swift翻译一遍，学习一下怎样用Swift开发Xcode的插件。</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>Xcode的插件大部分都是通过<a href="https://github.com/alcatraz/Alcatraz" target="_blank" rel="external">Alcatraz</a>管理的，在Xcode的Window菜单中打开Package Manager就是Alcatraz，在打开的插件管理界面中选择templates页签，然后在搜索框中输入xcode plugin就能找到Xcode Plugin Template插件。Xcode Plugin Template是已经写好可运行的Xcode插件模板，在github上也可下载安装<a href="https://github.com/kattrali/Xcode-Plugin-Template" target="_blank" rel="external">Xcode Plugin Template</a>。</p>
<img src="/2016/01/26/writing-xcode-plugin-in-swift/alcatraz.png" alt="Alcatraz" title="Alcatraz">
<p>Xcode的插件会安装到<code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</code>目录下，文件名后缀是.xcplugin，卸载时直接到这个目录中把对应的.xcplugin删除即可。</p>
<p>安装完后重启Xcode，新建项目时在OSX上就可以选择新建Xcode Plugin的工程，记得项目语言选择Swift。</p>
<img src="/2016/01/26/writing-xcode-plugin-in-swift/xcode-template.png" alt="Xcode Template" title="Xcode Template">
<a id="more"></a>
<h2 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h2><h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><p>虽然很多Xcode插件是没有菜单的，但是选项多或者需要通过特殊的触发条件可以使用菜单。</p>
<p>使用模板的话会自动生成菜单，如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> item = <span class="type">NSApp</span>.mainMenu!.itemWithTitle(<span class="string">"Edit"</span>)</div><div class="line"><span class="keyword">if</span> item != <span class="literal">nil</span> &#123;</div><div class="line">  <span class="keyword">let</span> actionMenuItem = <span class="type">NSMenuItem</span>(title:<span class="string">"Do Action"</span>, action:<span class="string">"doMenuAction"</span>, keyEquivalent:<span class="string">""</span>)</div><div class="line">  actionMenuItem.target = <span class="keyword">self</span></div><div class="line">  item!.submenu!.addItem(<span class="type">NSMenuItem</span>.separatorItem())</div><div class="line">  item!.submenu!.addItem(actionMenuItem)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码的意思是先找到Edit的菜单项，然后在里面添加“Do Action”的按钮，点击“Do Action”则会执行doMenuAction方法。添加键盘快捷键如Control+Shift+M，可以用以下方式：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> actionMenuItem = <span class="type">NSMenuItem</span>(title:<span class="string">"Do Action"</span>, action:<span class="string">"doMenuAction"</span>, keyEquivalent:<span class="string">"M"</span>)</div><div class="line">actionMenuItem.keyEquivalentModifierMask = <span class="type">Int</span>(<span class="type">NSEventModifierFlags</span>.<span class="type">ControlKeyMask</span>.rawValue)</div></pre></td></tr></table></figure></p>
<h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><p>按照Miku里面的说法，网页里已经实现了大部分功能，如果要移植到Xcode的话，只需写出以下逻辑就行了：</p>
<ol>
<li>在代码编辑框上面加上一个WebView来加载网页。</li>
<li>WebView支持用鼠标拖动，防止有时候挡住代码。</li>
<li>hook代码编辑框输入文字时的方法，调用网页的addFrame()方法来增加播放时间。</li>
<li>由于网页的资源过大，在线加载速度比较慢，所以把网页都打包到插件里。</li>
</ol>
<p>第一第二点先不说，主要说说第三点，怎么hook代码编辑框输入文字的方法。在github上有个叫<a href="https://github.com/rentzsch/jrswizzle" target="_blank" rel="external">JRSwizzle</a>的项目,JRSwizzle是让你可以在objc runtime运行时交换类方法，有点想AOP的概念。</p>
<p>JRSwizzle的用法很简单，在XXX-Briding-Header.h中引入<code>#import &quot;JRSwizzle.h&quot;</code>即可。</p>
<p>然后在hook方法中使用：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">hook</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="comment">// 先找到我们要hook的类，因为是要在代码编辑框输入文字时启用，所以要hook “IDESourceCodeEditor”这个类。</span></div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> srcEditorClass = <span class="type">NSClassFromString</span>(<span class="string">"IDESourceCodeEditor"</span>) <span class="keyword">as</span>? <span class="type">NSObject</span>.<span class="type">Type</span> <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="comment">// 把IDESourceCodeEditor的viewDidLoad方法替换为mikuViewDidLoad</span></div><div class="line">    <span class="keyword">try</span> srcEditorClass.jr_swizzleMethod(<span class="string">"viewDidLoad"</span>, withMethod: <span class="string">"mikuViewDidLoad"</span>)</div><div class="line">    <span class="comment">// 把IDESourceCodeEditor的textView方法替换为mikuTextView</span></div><div class="line">    <span class="keyword">try</span> srcEditorClass.jr_swizzleMethod(<span class="string">"textView:shouldChangeTextInRange:replacementString:"</span>, withMethod: <span class="string">"mikuTextView:shouldChangeTextInRange:replacementString:"</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span> &#123;</div><div class="line">    <span class="built_in">print</span>(error)</div><div class="line">    <span class="type">Swift</span>.<span class="built_in">print</span>(<span class="string">"Swizzling failed"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码中有个问题是mikuViewDidLoad和textview方法写在哪里，第一反应肯定是IDESourceCodeEditor，但是这个是私有的，在Xcode中是不可以直接使用。所有的类都是继承自NSObject，那么利用swift强悍的extension功能去扩展NSObject也可以实现到类似的效果。但是NSObject毕竟是父类，拿不到子类的一些属性，Miku的实现是把WebView添加到IDESourceCodeEditor的containerView中的，但是在NSObject拿不到这个属性，只能是在textView把WebView添加到textView.superview!.superview!.superview!上。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mikuTextView</span><span class="params">(textView: NSTextView,</span></span></div><div class="line">  shouldChangeTextInRange affectedCharRange: NSRange,</div><div class="line">  replacementString: String?) -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">let</span> mikuDragView = <span class="type">MikuDragView</span>.getSharedInstance()</div><div class="line">    mikuDragView.mikuWebView!.setPlayingTime(<span class="number">10</span>)</div><div class="line">    <span class="comment">// 不要问为什么这么多superview</span></div><div class="line">    textView.superview!.superview!.superview!.addSubview(mikuDragView)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.mikuTextView(textView, shouldChangeTextInRange: affectedCharRange, replacementString: replacementString)</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>更多的逻辑实现见<a href="https://github.com/wendyeq/MikuSwift" target="_blank" rel="external">https://github.com/wendyeq/MikuSwift</a></p>
<h3 id="安装升级"><a href="#安装升级" class="headerlink" title="安装升级"></a>安装升级</h3><p>模板默认是使用Xcode打开插件的，也就是说可以在在Xcode启动出来的Xcode里开发Xcode的插件。<br>编辑Edit Scheme把Run中的Build Configuration修改为Release，Executable修改为None。点击运行后重启Xcode即可。<br><img src="/2016/01/26/writing-xcode-plugin-in-swift/install.png" alt="安装" title="安装"></p>
<p>若是Xcode工具升级而工程中的Info.plist里面没有包含升级版本的DVTPlugInCompatibilityUUID着需手工添加。</p>
<p>先在终端中运行<code>defaults read /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID</code>,得到对应Xcode版本的DVTPlugInCompatibilityUUID，把终端中输出的字符串copy到Info.plist 的DVTPlugInCompatibilityUUIDs数组中去。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>参考项目：</p>
<p><a href="https://github.com/wendyeq/MikuSwift" target="_blank" rel="external">MikuSwift</a></p>
<p><a href="https://github.com/poboke/Miku" target="_blank" rel="external">Miku</a></p>
<p><a href="https://github.com/krzysztofzablocki/KZLinkedConsole" target="_blank" rel="external">KZLinkedConsole</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git简单用法]]></title>
      <url>http://wendyeq.me/2016/01/07/git-basics/</url>
      <content type="html"><![CDATA[<p><a href="htt://git-scm.com" target="_blank" rel="external">Git</a>是个分布式版本控制系统。Git不是万能的，他仅仅是个工具，用的好不好与使用的人有很大的关系，他需要使用Git的人对Git管理的内容有很清晰的理解，特别是处理冲突的时候。</p>
<p>目前使用图形客户端<a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a> + 终端的方式使用Git，对于Git最喜欢的就是她轻量级的分支。</p>
<p>Git托管平台除了著名的<a href="https://github.com/" target="_blank" rel="external">Github</a>之外还有开源自行搭建<a href="https://about.gitlab.com" target="_blank" rel="external">Gitlab</a>,国内的<a href="http://git.oschina.net" target="_blank" rel="external">OSChine</a>、<a href="https://coding.net/git" target="_blank" rel="external">Coding</a>、<a href="https://gitcafe.com/git" target="_blank" rel="external">GitCafe</a>等。用Git + VPS搭建私有无界面的服务器也是可以的。</p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git init // 初始化仓库</div><div class="line">git <span class="built_in">clone</span> [url] // 通过<span class="built_in">clone</span>已有项目初始化仓库</div><div class="line">git remote add origin [url] // 添加远程跟踪仓库</div><div class="line">git status // 查看仓库状态</div><div class="line">git add [filename] // 添加跟踪文件</div><div class="line">git commit -m <span class="string">'message'</span> // 写提交信息并提交到本地仓库</div><div class="line">git commit --amend // 修改最后一次提交信息</div><div class="line">git push origin master // 推送代码到origin仓库的master分支</div><div class="line">git pull origin master // 从origin仓库的master拉起代码到本地</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>Git的分支是非常轻量级的，创建和删除分支都很方便。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">git branch // 列出所有本地分支</div><div class="line">git branch -r // 列出所有远程分支</div><div class="line">git branch <span class="built_in">test</span> // 新建<span class="built_in">test</span>分支</div><div class="line">git branch -m old new // 重命名分支</div><div class="line">git branch <span class="_">-d</span> <span class="built_in">test</span> // 删除<span class="built_in">test</span>分支,当前分支不是<span class="built_in">test</span>才可删除</div><div class="line">git branch -D <span class="built_in">test</span> // 强制删除<span class="built_in">test</span>分支</div><div class="line">git branch --set-upstream <span class="built_in">test</span> origin/dev //将本地<span class="built_in">test</span>分支与远程dev分支之间建立链接</div><div class="line">git checkout [file,branch,tag] // 切换文件、分支、标签</div><div class="line">git checkout -b <span class="built_in">test</span> dev // 基于dev新建<span class="built_in">test</span>分支，并切换到<span class="built_in">test</span>分支</div><div class="line">git merge dev // 将dev分支合并到当前分支</div><div class="line">git merge --squash dev // 合并压缩，将dev上的commit压缩为一条</div></pre></td></tr></table></figure></p>
<h2 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h2><p>有时候其他人不小心做了错误的操作并提交，可以用revert新建一个commit，用于撤销他的提交，他哪次提交所修改的内容都会被撤销，并且应用到当前分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git revert [commit]</div></pre></td></tr></table></figure></p>
<p>重置当前分支的状态为指定commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git reset [commit] // 同时重置暂存区，但工作区不变</div><div class="line">git reset --hard [commit] // 同时重置暂存区和工作区</div></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git tag tagname // 新建标签</div><div class="line">git push origin --tags // 推送所有标签到origin</div><div class="line">git show // 显示所有信息</div><div class="line">git <span class="built_in">log</span> // 显示提交信息</div></pre></td></tr></table></figure>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><p>对windows 系统来说Git是不区分文件名的大小写的，也就是默认情况下修改了文件名的大小字母Git是不认为你做了变更的，需要修改配置来区分大小写，<code>git config core.ignorecase false</code>。</p>
<p>有时候合并其他的代码的时候会报“The following untracked working tree files would be overwritten by merge”的错误，如果用<code>git clean  -d  -fx &quot;&quot;</code> 这个命令来处理的话会很危险，他会把你没有加入到版本控制的内容都清除掉，包括你写在.gitignore文件里的内容。最好是把错误信息里面提到的文件加入版本控制或者直接删除。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一起数独的开发营销历程]]></title>
      <url>http://wendyeq.me/2016/01/01/17Sudoku-in-the-app-store/</url>
      <content type="html"><![CDATA[<p>一起数独是我开发的第一款IOS App，也是2014年时立下的一个计划。自9月上架以来已经在App Store上销售3个多月了，一共发布了4个版本，“畅销”17个国家和地区，累计在App Store上被查看1375次（有不少还是我自己点击查看的），卖出80份，销售额44.65 USD，收入30.38 USD（每年99 USD的membership都没赚回来）。以下主要讲讲这个App开发营销的整个过程，这是App Store的链接: <a href="https://itunes.apple.com/cn/app/apple-store/id1036241597?pt=117858878&amp;ct=me&amp;mt=8" title="一起数独－有难度的数独游戏" target="_blank" rel="external">https://itunes.apple.com/cn/app/apple-store/id1036241597</a> 。</p>
<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>几年前不是没有看到IOS开发崛起的机会，但是由于个人不喜欢Objective-C这门语言(也不喜欢Javascript，Javascript也跟IOS开发无关，纯粹是个人不喜欢这门语言而已)，所以一直没有开始做IOS的开发。直到2014年6月WWDC Swift横空出世，而且这个时候也凑齐Apple三件套，习惯了App Store的付费购买模式，就一直在想开发个应用试试。</p>
<p>首先这个应用不能太复杂而且对美工要求不能太高，因为只打算一个人做，太复杂的话开发周期会很长，日常还要出差、上班会忙不过来。美工要求太高的话，对我这种不会Photoshop的人来说直接歇菜。应用的销售模式都想好了采用一次付费购买的方式，不打算做免费应用然后加广告的模式，己所不欲勿施于人。一开始是准备做个工具类的应用，但是经过对付费排行榜的观察，发现工具类的应用很难畅销。后来也考虑和好几个方向，都没有想好要做什么。最后还是决定做个数独游戏。</p>
<p>早在高中的时候已经开始玩数独，那时候的题目都是书本上的。后来买了Motorola Defy安装的第一个游戏<a href="http://andoku.com/" target="_blank" rel="external">andoku</a>数独，玩到了晚上3点多。换了iPhone 5S之后也试过很多款数独游戏，但是都没有一款合心意的，不是就是难度太低，就是操作不方便，不能单手操作，或者是价格太贵了，比如我IOS上最喜欢的的康思数独(建议数独爱好者都用一下，它的题目真的不错)，虽然下载免费，但是如果把所有题目都内购了的话要1千多元。然后就萌生了开发一款有难度且能单手操作的数独游戏，平常主要玩手机都是在坐公车和搭电梯所以必须要方便单手操作，今年坐公车也认识了个美女。</p>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><p>确定了要做什么样的应用之后就着手设计界面原型，为了方便单手操作就就参考andoku设计为九宫格的样式，这样的话在适配到4S的时候就很丑了，不过我本来就没打算适配4S的，理由就是我做的是付费应用，在这个时候花钱买应用的人早就换iPhone 6以上了，而且很多数独游戏就是为了兼容4S或者预留位置放广告导致了操作的体验不好。<br><img src="/2016/01/01/17Sudoku-in-the-app-store/screen-demo.png" alt="界面原型" title="界面原型"></p>
<p>从7月19日开始到12月5日的2.5.0版本，开发过程中提交了55次，发布了4个版本。第三方库使用CocoaPods管理，刚开始也只用到了Google Analytics，Swift版本由1.2升级到2.0。</p>
<p>整个开发过程中也走不少弯路，比如题目原本打算是根据算法生成的，算法也写好了（在调试算法的过程中发现Swift的Playground实在是太好用了），但是根据算法生成的题目参差不齐，没有竞争力。</p>
<p>已证明标准数独最少需要17个提示数，所以找了个接近5万道只有17个提示数的题库。虽然提示数的多少与难度必然的关系，但是提示数越少给人的压力越大，用hodoku对数独难度进行评分，题目的难度在306到8080之间。所有题目都只有17个提示数这也是这个数独游戏的最大亮点，在游戏命名中也直接叫17 Sudoku中文谐音就是一起数独。</p>
<p>开发过程中最有趣的部分算是图标了，每发布一个版本都换一次图标，第一版的时候还不知道可以<a href="http://appicontemplate.com/" target="_blank" rel="external">appicontemplate</a>生成，直接用Sketch切的图，连圆角矩形都没做。</p>
<img src="/2016/01/01/17Sudoku-in-the-app-store/icon1.0.0.png" alt="icon 1.0.0" title="icon 1.0.0"> <img src="/2016/01/01/17Sudoku-in-the-app-store/icon1.1.0.png" alt="icon 1.1.0" title="icon 1.1.0"> <img src="/2016/01/01/17Sudoku-in-the-app-store/icon2.0.0.png" alt="icon 2.0.0" title="icon 2.0.0"> <img src="/2016/01/01/17Sudoku-in-the-app-store/icon2.5.0.png" alt="icon 2.5.0" title="icon 2.5.0">
<p>图标在App Store上的显示效果，同时也是目前为止我看到的最好的排名。<br><img src="/2016/01/01/17Sudoku-in-the-app-store/icon-in-app-store.png" alt="icon in app store" title="icon in app store"></p>
<h1 id="上架"><a href="#上架" class="headerlink" title="上架"></a>上架</h1><p>从7月19日开始开发，到了9月3日觉得第一版可以发布了，再不发布的话就会被拖延症坏了整个项目。由于8月份大部分时间都在外出差，用于开发的时间不多，实际上7月底的时候就开发的差不多了。</p>
<p>游戏一开始瞄准的就是国际市场，做完主要的开发之后就做了i18n，支持简体中文、繁体中文、英语，本来还想做个日文版的，结果Google翻译出来感觉有点奇怪就放弃了。IOS开发做i18n挺方便的，多语言都是key－value对，当然每次更新加新内容之后再做多语言还是麻烦，不过已经比其他的方便很多了。</p>
<p>上架发布的时候有几个地方要注意</p>
<ul>
<li>主要语言，如果有多语言的话主要语言还是选择英语比较好，主要语言指的是在没有做本地化的时候显示的是什么语言，英语相对中文还是更国际化的。</li>
<li>类别，上架的时候可以选择两个类别，要注意选择与自己游戏相关且竞争强度不大的类别，竞争强度大不大主要看类别排行榜上的应用质量。</li>
<li>视频预览，视频预览对大小和帧度要求比较高，一般要求真机录制，也就是每个分辨率都要有一台真机。没有视频预览的话关系也不大，反正一般我购买应用也不看视频预览的。</li>
<li>关键词，留在营销部分讲。</li>
</ul>
<p>App Store的应用发布很折腾人效率非常低，审核的等待时间一般都是一周，审核过程只需几个小时。<br>1.0.0版本9月3日提交的结果到9月11日才审核通过，12日才开始销售。<br><img src="/2016/01/01/17Sudoku-in-the-app-store/audit1.0.0.png" alt="audit1.0.0.png" title=""></p>
<p>1.1.0版本9月13日提交的结果到9月29日才审核通过，中间由于视频预览中留有鼠标的痕迹被拒，删除视频预览再提交要等一周之后才审核，🐢速。<br><img src="/2016/01/01/17Sudoku-in-the-app-store/audit1.1.0.png" alt="audit1.1.0.png" title=""></p>
<p>2.0.0版本10月16日提交的结果到10月21日才审核通过，中间由于在标题中做ASO优化做的太明显导致被拒，删除不必要的标题再提交，然后申请了加急审核，还是要等一周之后才审核，也就是发布一个版本可能会是两周之后才能审核通过。<br><img src="/2016/01/01/17Sudoku-in-the-app-store/audit2.0.0.png" alt="audit2.0.0.png" title=""></p>
<p>2.5.0版本12月5日提交的结果到12月12日审核通过。<br><img src="/2016/01/01/17Sudoku-in-the-app-store/audit2.5.0.png" alt="audit2.5.0.png" title=""></p>
<h1 id="营销"><a href="#营销" class="headerlink" title="营销"></a>营销</h1><p>当一个应用开发完毕之后，你以为完成了一个项目周期中的80%，实际上只是完成了20%，好戏才刚刚开始。</p>
<h2 id="第一次上架"><a href="#第一次上架" class="headerlink" title="第一次上架"></a>第一次上架</h2><p>App Store上有几百万个应用，如何让人发现你的应用是个大难题。游戏应用第一次上架的时候，按游戏的小类别浏览是可以看到每个新上架的应用的，其他类别的到没有这个功能。所以第一次上架很重要，如果在图标、描述上能吸引人下载就是最好的，可以利用这个时候冲榜，然后强者恒强。</p>
<h2 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h2><p>选择合适的分类和付费应用比较容易上榜，免费应用的榜单很难上，还好一开始就没打算免费，付费应用小分类榜单的前20名，每天只需几个下载就可以上。</p>
<h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>大部分人发现应用除了排行榜之外，通过App Store的搜索功能也是一个很重要的途径。如何设置关键词很重要，标题是App Store做索引的重要来源，可以设置主标题＋副标题的形式，比如我的应用“一起数独－有难度的数据游戏”。每个应用在每种语言下可以设置100个字符的关键词，关键词尽量不要重复，App Store会自动分词的。一般可以参考竞品的关键词来设置自己的关键词，可以通过一些工具来了解设置什么样的关键词比较合适，比如<a href="http://aso100.com/index.php/app/optimization" target="_blank" rel="external">ASO100</a>、<a href="http://www.asou.com/" target="_blank" rel="external">ASOU</a>，ASO100用来查看关键词和竞品对比，ASOU查看应用搜索优化指数。</p>
<p>在ASO100中可以看到关键词，经过4个版本的优化发现覆盖的关键词已经不少了，但是排名靠前的非常少。<br><img src="/2016/01/01/17Sudoku-in-the-app-store/aso100-key-word.png" alt="aso100-key-word.png" title=""></p>
<p>在ASOU查看应用搜索优化指数很低<br><img src="/2016/01/01/17Sudoku-in-the-app-store/asou.png" alt="asou.png" title=""></p>
<h2 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h2><p>数独这种小众游戏的市场不大，在百度数独吧中也只有区区3万5千多人关注而已，比咖啡吧都少的多。既然东西都做了，不奢望能赚钱，也想把membership的费用赚回来。中国区的消费基本集中在1、3、6这三个价格中，小众市场普通质量的应用怎么定价就麻烦了，定低了收不回成本，定高了卖不出去。没上架之前定的价格策略是逐步涨价，希望像股票一样越涨越多人买，价格高了，卖出一个等于之前的好几个。经常购买应用的人都知道，当你不久前花了18块钱，买了个应用，过几天他降到1块钱那是怎样的不爽。己所不欲勿施于人，那么价格就不能波动太大，所以就定了3元，一个早餐都不到的价格，往下有降价空间，往上又有涨价空间。</p>
<p>经过几次价格的调整发现，降到1元对销量的影响不大，倒是涨到6元对销量影响很大，卖不出去。在榜单中一天没有销量的话对排名影响很大，排名下降得很厉害。</p>
<p>在ASO100中看到排名图表，App Store最近2次对索引的调整对我的应用排名非常之大。<br><img src="/2016/01/01/17Sudoku-in-the-app-store/aso100.png" alt="aso100.png" title=""></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>比如在贴吧中发软文，发过一两篇，效果不大。发兑换码到一些评测网站或者写一些软文投稿之类，由于应用质量一般，没什么特点就没搞。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>通过一起数独这个游戏项目终于把IOS开发的流程搞清楚，还有很多感触只可意会不能言传。<br>现在终于明白以前看小说时那些大神求月票是一种什么心情，就跟你每天去榜单上看看自己的应用有没有上榜，有没有人下载一样。最大的遗憾是App Store上没有人评论！</p>
<p>12月之后销售开始好转，有点强者恒强的味道，最后掉下来是因为那几天涨价了。<br><img src="/2016/01/01/17Sudoku-in-the-app-store/sale.png" alt="sale.png" title=""></p>
<p>虽然有时会上一下分类榜，但是查看次数实际太少了，5.8%的购买转化率还是比较满意的。<br><img src="/2016/01/01/17Sudoku-in-the-app-store/analytics.png" alt="analytics.png" title=""></p>
<p>有兴趣的话可以点击看看，App Store的链接: <a href="https://itunes.apple.com/cn/app/apple-store/id1036241597?pt=117858878&amp;ct=me&amp;mt=8" title="一起数独－有难度的数独游戏" target="_blank" rel="external">https://itunes.apple.com/cn/app/apple-store/id1036241597</a> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[KindlePaperWhite使用心得]]></title>
      <url>http://wendyeq.me/2013/07/01/kpw-detail/</url>
      <content type="html"><![CDATA[<h3 id="硬件参数"><a href="#硬件参数" class="headerlink" title="硬件参数"></a>硬件参数</h3><ul>
<li><p>OS：Linux</p>
</li>
<li><p>屏幕尺寸：6寸</p>
</li>
<li><p>触摸屏：电容屏，2点触控</p>
</li>
<li><p>分辨率：1024x768像素，212ppi</p>
</li>
<li><p>CPU型号：飞思卡尔 i. MX50 Rev.1.1</p>
</li>
<li><p>CPU主频：800MHz </p>
</li>
<li><p>存储容量：2GB存储空间（包括大约1.25 GB的用户存储空间），5GB的云存储</p>
</li>
<li><p>前置灯：4颗LED</p>
</li>
<li><p>电池：3.7V 1420mAh </p>
</li>
<li><p>尺寸大小：169毫米x 117毫米x 9.1毫米</p>
</li>
<li><p>重量：213克</p>
</li>
</ul>
<p>kindle paperwhite 的规格参数在看惯了双核、四核平板的今天，一点都不起眼。最吸引眼球的就是212ppi的显示屏，不但在正常自然光下看书很舒服，而且在晚上没有灯光的地方通过4颗LED的发光看起来一点都不刺眼。</p>
<h3 id="系统软件"><a href="#系统软件" class="headerlink" title="系统软件"></a>系统软件</h3><p>我买的是日版kindle paperwhite，多语言直接支持中文，但是需要先升级到5.3.5版本的系统才能在亚马逊中国Kindle商店购买图书。升级的方法很简单，点击右上角的三条横线，再点击设置，再一次点击右上角的三条横线，第二个菜单选项就是更新您的Kindle了。点击就会自动下载更新。</p>
<h3 id="Kindle的优缺点"><a href="#Kindle的优缺点" class="headerlink" title="Kindle的优缺点"></a>Kindle的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>1、可以查看热点标注，也就是可以显示其他kindle用户标注的重点段落。一般我看到别人标注的段落都是认真多看几遍的，毕竟群众的力量是无穷的。使用热点标注这个功能的前提是这本书是在Kindle商店里面有的。</p>
<p>2、Send To Kindle。可以将网页内容一键发送到Kindle。Amazon官方软件不支持中国版的kindle，可以使用chrome的插件<a href="https://chrome.google.com/webstore/detail/send-to-kindle-by-klipme/ipkfnchcgalnafehpglfbommidgmalan" target="_blank" rel="external">Send to Kindle (by Klip.me)</a>替代。</p>
<p>3、推送与同步。Kindle支持通过发送邮件附件的方式把书发送到Kindle图书馆的个人文档中，个人文档的存储大小是5G。个人文档支持的格式包括：Microsoft Word, HTML, RTF, JPEG, GIF, PNG, BMP, TXT和PDF。除PDF之外，其他格式会自动转换为Kindle格式。英文版的PDF也可以显式的转化为Kindle格式，只需在邮件主题中加入“convert”，不支持中文PDF的转换。转换为Kindle格式的个人文档会自动同步个人文档的最新阅读位置、书签、笔记和标注，使所有设备都能看到同步的记录，这就是为什么要把书发送到Kindle的原因。</p>
<p>4、电子墨水屏的显示效果跟书本一样，看起来真的很舒服。</p>
<p>5、使用时间长，当然是在关闭WIFI的情况下，开着WIFI还是比较耗电的。</p>
<p>6、不用关机，一直开着，没电就拿USB充电器充电。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>1、不支持EPUB，收藏了很多EPUB的书籍，kindle paperwhite居然不支持，真郁闷。虽然这个问题可以通过把EPUB转换为MOBI或者安装多看系统解决，但是原生系统支持不是更好吗，也不是很难解决的问题，出个新固件就可以了。Amazon不是靠卖硬件赚钱的，是靠卖书赚钱的，EPUB的免费书太多了。</p>
<p>2、PDF的阅读效果一般，虽然已经超出了我的估计。但真的很一般，6寸的东西能对他有什么期望呢。</p>
<p>3、同步推送漫，特别是需要转换的PDF，最长的居然是2天之后才推送完成。</p>
<p>4、如果没有设置“一键下单”购书会很麻烦，而且不能多本书合并付款，每本书都会产生一张订单。当你第一次使用购买了一堆书的时候，一大堆订单发到你的邮箱去，很恐怖。</p>
<h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><p>1、截屏，只需要同时点击左上角和右下角，或者右上角和左上角（斜对角），图片就会保存到kindle硬盘中，用USB线和电脑连接，就可以取得。 </p>
<p>2、添加书签，在阅读中可以通过点击右上角的页面以快速添加或删除书签。在阅读界面查看笔记和标注的菜单中可以管理书签和标注。感觉书签和标注放一起比较混乱还是分开比较好。</p>
<p>3、阅读进度，点击阅读节目的左下角切换阅读进度的显示信息。</p>
<p>4、主页面导航，点击主页面的页码，然后可以选择跳到其他页码或则字母表。（书籍多的时候比较好用）</p>
<p>5、收藏夹，Kindle不会根据你在kindle硬盘中通过文件夹有序的存放好的文档顺序显示文档，也就是kindle把所有的文档都放在同一个文件夹doucument里。收藏夹是一种排序选项，而不是文件夹。可以将一个文档添加到多个收藏夹中。删除收藏夹后，收藏夹里面的文档不会删除，而是自动回到主页上。</p>
<p>6、amazon的<a href="http://www.amazon.cn/gp/help/customer/display.html?ie=UTF8&amp;nodeId=200843370" target="_blank" rel="external">kindle帮助</a></p>
<h3 id="Kindle-Paperwhite-真的值得拥有，谁用谁知道！"><a href="#Kindle-Paperwhite-真的值得拥有，谁用谁知道！" class="headerlink" title="Kindle Paperwhite 真的值得拥有，谁用谁知道！"></a>Kindle Paperwhite 真的值得拥有，谁用谁知道！</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[日本亚马逊购买KindlePaperWhite]]></title>
      <url>http://wendyeq.me/2013/06/10/kpw-from-jp/</url>
      <content type="html"><![CDATA[<p>事实上我已经有一台盛大的Bambook电子书了，但是盛大的内容不够丰富，大部分都是网络小说，看PDF也不方便。听到Kindle要入华的消息就开始留意起Kindle了，网上对kindle的评论都很正面，amazon.cn书城上的资源也很多。刚开始有传言是4月26日国行上市的，但是被耍了，直到6月7日才上市，这时我日本Amazon淘回来的Kindle PaperWhite都已经玩了几天了。</p>
<p>随着2013年日元大幅度的贬值，去日本海淘成为了不少人的选择。日本海淘的优点：快递速度快，日元贬值人民币的购买力增强。</p>
<p>购买过程：</p>
<ol>
<li><p>注册转运公司，我用的是<a href="http://www.jshoppers.com/gb/forward/" target="_blank" rel="external">jshoppers</a>语言可以选择中文，支持支付宝支付转运费。</p>
</li>
<li><p>注册<a href="http://www.amazon.co.jp" target="_blank" rel="external">日本亚马逊</a>，如果是中国亚马逊、美国亚马逊都是用同一个邮箱注册的话，最好就用不同的密码进行区分。不会日语没有关系，进入首页在Amazon搜索框的上面有个In English的链接，可以国际化为英语界面。</p>
</li>
<li><p>下单<a href="http://www.amazon.co.jp/gp/product/B007OZO03M/" target="_blank" rel="external">Kindle</a>，购购物过程与其他国家的亚马逊没有什么不同。也是可以选择Amazon Prime服务试用1个月，但是要记得关闭了自动续期。最好是周日到周四下单购买，据说jsphoppers周六日是不收快递的。</p>
</li>
<li><p>等收快递，jsphoppers是发EMS的，从日本到中国速度很快。6月1日发货，6月4日就收到了，而且广州海关也没有收税。</p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整个过程是5月27日晚上下单，6月4日早上收到。Kindle PaperWhite的价格是7980日元，按当天的汇率折合人民币是485元左右。转运费是1145日元，约70元人民币。Kindle PaperWhite的到手价是560左右。如果运气太好，需要为伟大的税收事业做贡献的话，盛惠80元。也就是最高的成本是640元。国行的价格是849元，这个定价也不会太离谱，毕竟国行的是无广告版本，在美国无广告版本也要139美元。如果不是日元贬值的太厉害的话，在日本也买不到便宜的Kindle PaperWhite。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[第一次海淘]]></title>
      <url>http://wendyeq.me/2013/05/26/first-haitao/</url>
      <content type="html"><![CDATA[<p>很早之前就有海淘的想法的，但是一直都没有机会实践。一来是没有什么特别需要海淘，二来一些东西海淘也不见得比在国内购买要便宜。从去年年底开始喜欢上<a href="http://www.movado.cn/" target="_blank" rel="external">Movado</a>的手表，特别喜欢只有时针和分针的手表，一直都想拥有一块这样的手表。查询了一下国内Movado的价格都在4000元以上（<a href="http://www.wbiao.cn/movado/index-o1-b1.html" target="_blank" rel="external">万表网报价</a>），后来发现海淘的价格很便宜。</p>
<p>在海淘手表当中有两个网站比较出名，分别是<a href="http://www.ashford.com/" target="_blank" rel="external">Ashford</a>和<a href="http://www.jomashop.com/" target="_blank" rel="external">Jomashop</a>，Ashford甚至还有中文站点。本来海淘的第一单是发生在Ashford的，那天Ashford的一款Movado手表打折打得很厉害，但是招商银行的信用卡死活都付不了款，后来折扣码也过期了,就没有购买。</p>
<p>在一次无意中发现了<a href="http://www.worldofwatches.com/" target="_blank" rel="external">Worldofwatches</a>中的<a href="http://www.worldofwatches.com/detail.asp?bo_products_variance_id=98303&amp;iq=1" target="_blank" rel="external">和谐0606057</a>打折也很厉害，只需$222就能买到了，国内要4500左右（<a href="http://www.movado.cn/harmony-0606057.html" target="_blank" rel="external">Movado官网对和谐0606057的介绍</a>)。只有用国内四分之一的价格就可以买到一个Movado的手表了，就算从国外运回来运费也只需要100多块人民币。</p>
<p><img src="http://www.movado.cn/media/catalog/product/cache/12/image/327x544/9df78eab33525d08d6e5fb8d27136e95/0/6/0606057w_459x715_2.jpg" alt=""></p>
<p>从World Of Watches里购买了，购买的步骤如下：</p>
<ol>
<li><p>找返利网站，返利网站通常会有商品价格的几个百分点的返利。常用的返利网站有<a href="http://www.55haitao.com/?fromuid=66336" target="_blank" rel="external">55海淘</a>、<a href="http://www.mrrebates.com?refid=707528" target="_blank" rel="external">Mr.Rebates</a>、<a href="http://www.ebates.com/rf.do?referrerid=b9sY7CG45Yq6VBUuUdruTg%3D%3D" target="_blank" rel="external">Ebates</a>。</p>
</li>
<li><p>通过返利网站查询，确定那家返利网站的返利更给力。对于World Of Watches这家店来说在55海淘的返利7%，在Mr.Rebates的返利是6%，在Ebates的返利是5%。使用worldofwatches，在55海淘是搜索不到的，只能使用world of watches，模糊搜索做的真烂。先登录55海淘然后<a href="http://www.55haitao.com/store/World-of-Watches.html" target="_blank" rel="external">点击直达</a>。</p>
</li>
<li><p>注册转运，我用的转运公司是<a href="http://www.ctmex.com/reg.asp?sp=wendyeq" target="_blank" rel="external">赤兔马速递</a>。使用他的原因很简单，第一是不用上传身份证，第二是部分渠道包税，第三是所有转运公司都没有用过，第四点击别人的推荐注册送了10个积分（相当于10元）可以第一次转运就使用。</p>
</li>
<li><p>在World Of Watches的购买很简单，找到想要购买的商品，点击Add To Cart就会跳到结算的地方，在World Of Watches购物是不用注册的，但是需要提供EMail。World Of Watches支持信用卡、Paypal、Google Checkout和Amazon付款。我用的是信用卡的方式支付，当时把Shipping Address 和Billing Address 都填了转运地址。</p>
</li>
<li><p>我是4月23日下订单的，4月26日就送到了转运公司免税州俄勒冈（OR）的仓库，但是赤兔马免税州俄勒冈（OR）只签收，不入库，都会统一中转到加州（CA）才会入库，时间为3个工作日左右，转仓费每磅1美金。在World Of Watches发货之后会提供快递公司的运单号，先拿着运单号到转运公司填写到货预报，货入仓了就可以根据到货预报生成订单，然后选择转运的渠道，我用的是E渠道。</p>
</li>
<li><p>等着收货。5月2日转运公司发货，5月12日收到包裹。可以使用<a href="http://www.haitaotong.com/" target="_blank" rel="external">海淘通</a>查询快递信息。比较郁闷的是在国内使用的是能达快递，送快递送的比较慢。12号那天刚好要出差，只能叫人代收。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>手表总算是无惊无险无税的到手了，整过过程历时20天。这次只能算是试水的海淘很成功，看来以后海淘的机会有很多。我心仪的那款手表还没有打折呢，快点打折吧。</p>
<h2 id="注册链接"><a href="#注册链接" class="headerlink" title="注册链接"></a>注册链接</h2><p>通过我的链接注册，不仅我可以得到奖励，注册方也可以得到奖励，可以说是双赢。</p>
<p><a href="http://www.55haitao.com/?fromuid=66336" target="_blank" rel="external">55海淘</a></p>
<p><a href="http://www.mrrebates.com?refid=707528" target="_blank" rel="external">Mr.Rebates</a></p>
<p><a href="http://www.ebates.com/rf.do?referrerid=b9sY7CG45Yq6VBUuUdruTg%3D%3D" target="_blank" rel="external">Ebates</a></p>
<p><a href="http://www.ctmex.com/reg.asp?sp=wendyeq" target="_blank" rel="external">赤兔马速递</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB-Replica－Set]]></title>
      <url>http://wendyeq.me/2013/03/10/mongodb-replica-set/</url>
      <content type="html"><![CDATA[<p>MongoDB的Replication是一种确保冗余、备份和自动故障转移的机制。测试环境中一般做3个复制，1个是主要的，另外两个是二级的。</p>
<h4 id="构建复制数据集"><a href="#构建复制数据集" class="headerlink" title="构建复制数据集"></a>构建复制数据集</h4><p>构建包括3个复制的数据集，数据集的名称是rs0。<br>先建立存储3个复制的目录</p>
<pre><code>sudo mkdir -p /data/db/rs0-0 /data/db/rs0-1 /data/db/rs0-2
</code></pre><p>然后分别在3个不同的命令行窗口输入，以下命令启动mongod</p>
<pre><code>sudo /opt/mongodb/bin/mongod --port 27001 --dbpath /data/db/rs0-0 --replSet rs0
sudo /opt/mongodb/bin/mongod --port 27002 --dbpath /data/db/rs0-1 --replSet rs0
sudo /opt/mongodb/bin/mongod --port 27003 --dbpath /data/db/rs0-2 --replSet rs0
</code></pre><a id="more"></a>
<p>连接到其中的一个mongod,设置配置信息（使用rs.initiate()）</p>
<pre><code>wendyeq@wendyeq-mint /data/db $ /opt/mongodb/bin/mongo --port 27001
MongoDB shell version: 2.2.3
connecting to: 127.0.0.1:27001/test
&gt; rsconf={_id:&quot;rs0&quot;,members:[{_id:0,host:&quot;localhost:27001&quot;},{_id:1,host:&quot;localhost:27002&quot;},{_id:2,host:&quot;localhost:27003&quot;}]}
{
    &quot;_id&quot; : &quot;rs0&quot;,
    &quot;members&quot; : [
        {
            &quot;_id&quot; : 0,
            &quot;host&quot; : &quot;localhost:27001&quot;
        },
        {
            &quot;_id&quot; : 1,
            &quot;host&quot; : &quot;localhost:27002&quot;
        },
        {
            &quot;_id&quot; : 2,
            &quot;host&quot; : &quot;localhost:27003&quot;
        }
    ]
}
&gt; rs.initiate(rsconf)
{
    &quot;info&quot; : &quot;Config now saved locally.  Should come online in about a minute.&quot;,
    &quot;ok&quot; : 1
}
&gt; 
</code></pre><p>使用rs.status()查看状态，用db.isMaster()验证是否是主要数据集。</p>
<pre><code>&gt; rs.status()
{
    &quot;set&quot; : &quot;rs0&quot;,
    &quot;date&quot; : ISODate(&quot;2013-03-10T12:51:04Z&quot;),
    &quot;myState&quot; : 1,
    &quot;members&quot; : [
        {
            &quot;_id&quot; : 0,
            &quot;name&quot; : &quot;localhost:27001&quot;,
            &quot;health&quot; : 1,
            &quot;state&quot; : 1,
            &quot;stateStr&quot; : &quot;PRIMARY&quot;,
            &quot;uptime&quot; : 385,
            &quot;optime&quot; : Timestamp(1362919747000, 1),
            &quot;optimeDate&quot; : ISODate(&quot;2013-03-10T12:49:07Z&quot;),
            &quot;self&quot; : true
        },
        {
            &quot;_id&quot; : 1,
            &quot;name&quot; : &quot;localhost:27002&quot;,
            &quot;health&quot; : 1,
            &quot;state&quot; : 2,
            &quot;stateStr&quot; : &quot;SECONDARY&quot;,
            &quot;uptime&quot; : 114,
            &quot;optime&quot; : Timestamp(1362919747000, 1),
            &quot;optimeDate&quot; : ISODate(&quot;2013-03-10T12:49:07Z&quot;),
            &quot;lastHeartbeat&quot; : ISODate(&quot;2013-03-10T12:51:04Z&quot;),
            &quot;pingMs&quot; : 1
        },
        {
            &quot;_id&quot; : 2,
            &quot;name&quot; : &quot;localhost:27003&quot;,
            &quot;health&quot; : 1,
            &quot;state&quot; : 2,
            &quot;stateStr&quot; : &quot;SECONDARY&quot;,
            &quot;uptime&quot; : 114,
            &quot;optime&quot; : Timestamp(1362919747000, 1),
            &quot;optimeDate&quot; : ISODate(&quot;2013-03-10T12:49:07Z&quot;),
            &quot;lastHeartbeat&quot; : ISODate(&quot;2013-03-10T12:51:04Z&quot;),
            &quot;pingMs&quot; : 1
        }
    ],
    &quot;ok&quot; : 1
}
rs0:PRIMARY&gt; db.isMaster()
{
    &quot;setName&quot; : &quot;rs0&quot;,
    &quot;ismaster&quot; : true,
    &quot;secondary&quot; : false,
    &quot;hosts&quot; : [
        &quot;localhost:27001&quot;,
        &quot;localhost:27003&quot;,
        &quot;localhost:27002&quot;
    ],
    &quot;primary&quot; : &quot;localhost:27001&quot;,
    &quot;me&quot; : &quot;localhost:27001&quot;,
    &quot;maxBsonObjectSize&quot; : 16777216,
    &quot;localTime&quot; : ISODate(&quot;2013-03-10T12:51:30.816Z&quot;),
    &quot;ok&quot; : 1
}
</code></pre><p>可以在PRIMARY是通过rs.stepDown()来切换PRIMARY，执行此命令后会在剩余的常规节点选一个来充当PRIMARY。</p>
<pre><code>rs0:PRIMARY&gt; rs.stepDown()
Sun Mar 10 21:01:15 DBClientCursor::init call() failed
Sun Mar 10 21:01:15 query failed : admin.$cmd { replSetStepDown: 60.0 } to: 127.0.0.1:27001
Sun Mar 10 21:01:15 Error: error doing query: failed src/mongo/shell/collection.js:155
Sun Mar 10 21:01:15 trying reconnect to 127.0.0.1:27001
Sun Mar 10 21:01:15 reconnect 127.0.0.1:27001 ok
rs0:SECONDARY&gt; db.isMaster()
{
    &quot;setName&quot; : &quot;rs0&quot;,
    &quot;ismaster&quot; : false,
    &quot;secondary&quot; : true,
    &quot;hosts&quot; : [
        &quot;localhost:27001&quot;,
        &quot;localhost:27003&quot;,
        &quot;localhost:27002&quot;
    ],
    &quot;primary&quot; : &quot;localhost:27003&quot;,
    &quot;me&quot; : &quot;localhost:27001&quot;,
    &quot;maxBsonObjectSize&quot; : 16777216,
    &quot;localTime&quot; : ISODate(&quot;2013-03-10T13:01:30.647Z&quot;),
    &quot;ok&quot; : 1
}
</code></pre><p>到现在最简单的复制数据集就建立完成了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB-M101-Aggregation]]></title>
      <url>http://wendyeq.me/2013/01/27/mongodb-m101-aggregation/</url>
      <content type="html"><![CDATA[<p>在<a href="http://www.wendyeq.me/blog/2013/01/10/MongoDB-M101-CRUD" target="_blank" rel="external">MongoDB-M101-CRUD</a> 中介绍了MongoDB的查询方式都是比较简单的不能用来做复杂的查询和运算。MongoDB提供类似SQL这样查询数据集合的工具——aggregation框架。aggregation框架的工作原理类似pipeline,也就是把当前流程的输出当作下一个流程的输入,这个过程不断进行下去，最后得到最终结果。Binary, Symbol, MinKey, MaxKey, DBRef, Code, and CodeWScope这些类型是不能使用pipeline的。SQL与Aggregation框架的<a href="http://docs.mongodb.org/manual/reference/sql-aggregation-comparison/" target="_blank" rel="external">对照表</a>如下：</p>
<table>
<thead>
<tr>
<th>SQL Terms, Functions, and Concepts</th>
<th style="text-align:center">MongoDB Aggregation Operators</th>
<th style="text-align:right">Input:Output</th>
</tr>
</thead>
<tbody>
<tr>
<td>where</td>
<td style="text-align:center">$match</td>
<td style="text-align:right">N : 1</td>
</tr>
<tr>
<td>group by</td>
<td style="text-align:center">$group</td>
<td style="text-align:right">N : 1</td>
</tr>
<tr>
<td>having</td>
<td style="text-align:center">$match</td>
<td style="text-align:right">N : 1</td>
</tr>
<tr>
<td>select</td>
<td style="text-align:center">$project</td>
<td style="text-align:right">1 : 1</td>
</tr>
<tr>
<td>order by</td>
<td style="text-align:center">$sort</td>
<td style="text-align:right">1 : 1</td>
</tr>
<tr>
<td>limit</td>
<td style="text-align:center">$limit</td>
<td style="text-align:right">No</td>
</tr>
<tr>
<td>sum()</td>
<td style="text-align:center">$sum</td>
<td style="text-align:right">No</td>
</tr>
<tr>
<td>count()</td>
<td style="text-align:center">$sum</td>
<td style="text-align:right">No</td>
</tr>
<tr>
<td>join</td>
<td style="text-align:center">No direct corresponding operator; however, the $unwind operator allows for somewhat similar functionality, but with fields embedded within the document.</td>
<td style="text-align:right">No</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>使用MongoDB提供的<a href="http://media.mongodb.org/zips.json" target="_blank" rel="external">zips.json</a>和<a href="https://education.10gen.com/static/content-10gen-devs/handouts/hw4-3.c996ab74b105.tar" target="_blank" rel="external">posts.json</a>数据来进行测试。zips的数据结构如下：</p>
<pre><code>&gt; db.zips.findOne()
{
    &quot;city&quot; : &quot;ACMAR&quot;,
    &quot;loc&quot; : [
        -86.51557,
        33.584132
    ],
    &quot;pop&quot; : 6055,
    &quot;state&quot; : &quot;AL&quot;,
    &quot;_id&quot; : &quot;35004&quot;
}
</code></pre><h4 id="match"><a href="#match" class="headerlink" title="$match"></a>$match</h4><p>$match主要是用于过滤,语法与find()中使用过滤类似。<br>可以是单个条件做过滤，比如只显示city是ACMAR的记录</p>
<pre><code>db.zips.aggregate([{$match: {city: &quot;ACMAR&quot;}}])
</code></pre><p>也可以是多个条件做过滤，比如显示state是AL且pop大于40000的记录</p>
<pre><code>db.zips.aggregate([{$match:{state: &quot;AL&quot;, pop: {$gt: 40000}}}])
</code></pre><p>aggregation框架查出来的结果包括两部分，一部分是结果”result”数组,一部分是校验查询是否成功”ok”。</p>
<pre><code>&gt; db.zips.aggregate([{$match: {city: &quot;ACMAR&quot;}}])
{
    &quot;result&quot; : [
        {
            &quot;city&quot; : &quot;ACMAR&quot;,
            &quot;loc&quot; : [
                -86.51557,
                33.584132
            ],
            &quot;pop&quot; : 6055,
            &quot;state&quot; : &quot;AL&quot;,
            &quot;_id&quot; : &quot;35004&quot;
        }
    ],
    &quot;ok&quot; : 1
}
</code></pre><h4 id="group"><a href="#group" class="headerlink" title="$group"></a>$group</h4><p>$group主要是用于分组统计的。$group的第一个字段一定要是”_id”,如果不是的话就会直接报错。<br>实现<code>select count(*) as count from zips</code>的方式如下</p>
<pre><code>&gt; db.zips.aggregate([{$group:{&quot;_id&quot;: null,count: {&quot;$sum&quot;: 1}}}])
{ &quot;result&quot; : [ { &quot;_id&quot; : null, &quot;count&quot; : 29467 } ], &quot;ok&quot; : 1 }
&gt; db.zips.find().count()
29467
</code></pre><p>实现<code>select count(pop) as count from zips group by state</code>的方式如下，需要统计的字段需要”$pop”这样的写法，前面是美元符号，然后用双引号括住。</p>
<pre><code>db.zips.aggregate([{$group:{&quot;_id&quot;: &quot;$state&quot;,count: {&quot;$sum&quot;: &quot;$pop&quot;}}}])
</code></pre><p>实现<code>select count(pop) as from zips where state = &quot;AL&quot; group by state</code></p>
<p>  和<code>select count(pop) as from zips where group by state having state = &quot;AL&quot;</code>可以用$group和$match组合使用。</p>
<p>这条SQL语句最组要的区别是先过滤还是先分组的问题，先过滤再分组的话就先执行$match部分，然后用$match输入的结果进行$group，也就是pipeline；反之就是先$group再$match。由于$group是在内存中计算的，所以比较好的实现是先过滤出需要的数据，再对过滤出来的数据进行分组。<br>由于aggregate处理数据的方式是pipeline，所以$group执行完之后输出的结果只包括“_id”和“count”字段，也就是后面跟着要运行的$match得到的输入数据也是只有“_id”和“count”字段，因此如果$match中使用”state”或者”$state”都不会得到正确的数据，具体可以看下面的代码实现。</p>
<pre><code>&gt; db.zips.aggregate([{$match:{state:&quot;AL&quot;}}, {$group:{&quot;_id&quot;: &quot;$state&quot;,count: {&quot;$sum&quot;: &quot;$pop&quot;}}}])
{ &quot;result&quot; : [ { &quot;_id&quot; : &quot;AL&quot;, &quot;count&quot; : 4040587 } ], &quot;ok&quot; : 1 }
&gt; db.zips.aggregate([{$group:{&quot;_id&quot;: &quot;$state&quot;,count: {&quot;$sum&quot;: &quot;$pop&quot;}}},{$match:{&quot;_id&quot;:&quot;AL&quot;}}])
{ &quot;result&quot; : [ { &quot;_id&quot; : &quot;AL&quot;, &quot;count&quot; : 4040587 } ], &quot;ok&quot; : 1 }
&gt; db.zips.aggregate([{$group:{&quot;_id&quot;: &quot;$state&quot;,count: {&quot;$sum&quot;: &quot;$pop&quot;}}},{$match:{&quot;state&quot;:&quot;AL&quot;}}])
{ &quot;result&quot; : [ ], &quot;ok&quot; : 1 }
&gt; db.zips.aggregate([{$group:{&quot;_id&quot;: &quot;$state&quot;,count: {&quot;$sum&quot;: &quot;$pop&quot;}}},{$match:{&quot;$state&quot;:&quot;AL&quot;}}])
{ &quot;result&quot; : [ ], &quot;ok&quot; : 1 }
</code></pre><h5 id="addToSet"><a href="#addToSet" class="headerlink" title="$addToSet"></a>$addToSet</h5><p>$addToSet是如果一个值在数组中不存在，就把这个值添加到数组。用于获取不存在相同元素的数组。</p>
<pre><code>&gt; db.posts.aggregate([{$group:{&quot;_id&quot;: null,titles:{$addToSet:&quot;$title&quot;}}}])
{
    &quot;result&quot; : [
        {
            &quot;_id&quot; : null,
            &quot;titles&quot; : [
                &quot;Declaration of Independence&quot;,
                &quot;Gettysburg Address&quot;,
                &quot;Bill of Rights&quot;,
                &quot;US Constitution&quot;
            ]
        }
    ],
    &quot;ok&quot; : 1
}
</code></pre><h5 id="push"><a href="#push" class="headerlink" title="$push"></a>$push</h5><p>$push与$addToSet很相似，但是$push不会判断值是否在数组中存在，所有值无论是否重复都会添加到数组中。</p>
<pre><code>db.posts.aggregate([{$group:{&quot;_id&quot;: null,titles:{$push:&quot;$title&quot;}}}])
</code></pre><h5 id="sum-avg"><a href="#sum-avg" class="headerlink" title="$sum $avg"></a><code>$sum $avg</code></h5><p>$sum是用于汇总，$avg是用于求平均数的。</p>
<pre><code>db.zips.aggregate([{$group:{&quot;_id&quot;: &quot;$state&quot;,count: {&quot;$sum&quot;: &quot;$pop&quot;}}}])
db.zips.aggregate([{$group:{&quot;_id&quot;: &quot;$state&quot;,count: {&quot;$avg&quot;: &quot;$pop&quot;}}}])
</code></pre><h5 id="max-min"><a href="#max-min" class="headerlink" title="$max $min"></a><code>$max $min</code></h5><p>$max是求最大值，$min是求最小值。</p>
<pre><code>db.zips.aggregate([{$group:{&quot;_id&quot;: &quot;$state&quot;, maxpop:{$max:&quot;$pop&quot;}}}])
db.zips.aggregate([{$group:{&quot;_id&quot;: &quot;$state&quot;, minpop:{$min:&quot;$pop&quot;}}}])
</code></pre><h5 id="first-last"><a href="#first-last" class="headerlink" title="$first $last"></a><code>$first $last</code></h5><p>$first是取第一条记录，$last是取最后一条记录。<br>下面的实例是先根据state和city分组，计算出population，然后根据state和population排序，最后根据state分组，获取每个组里面populatin第一或者最后的一个city。</p>
<pre><code>db.zips.aggregate([{$group: {_id: {state:&quot;$state&quot;, city:&quot;$city&quot;},population: {$sum:&quot;$pop&quot;}}}, {$sort:{&quot;_id.state&quot;:1,&quot;population&quot;:-1}}, {$group: {_id:&quot;$_id.state&quot;, city:{$first:&quot;$_id.city&quot;}}}])
db.zips.aggregate([{$group: {_id: {state:&quot;$state&quot;, city:&quot;$city&quot;},population: {$sum:&quot;$pop&quot;}}}, {$sort:{&quot;_id.state&quot;:1,&quot;population&quot;:-1}}, {$group: {_id:&quot;$_id.state&quot;, city:{$last:&quot;$_id.city&quot;}}}])
</code></pre><h4 id="sort"><a href="#sort" class="headerlink" title="$sort"></a>$sort</h4><p>$sort主要是对结果集进行排序。<br>实现<code>select count(pop) as count from zips group by state order by count</code>的方式如下</p>
<pre><code>db.zips.aggregate([{$group:{&quot;_id&quot;: &quot;$state&quot;,count: {&quot;$sum&quot;: &quot;$pop&quot;}}},{$sort: {count:1}}])
</code></pre><p>$sort、$skip、$limit同时用在aggregate中执行的顺序是那个写在前面就先执行那个，与find执行的时候是先sort，然后skip，最后才是limit这样的顺序完全不同。</p>
<pre><code>&gt; db.zips.aggregate([{$group:{&quot;_id&quot;: &quot;$state&quot;,count: {&quot;$sum&quot;: &quot;$pop&quot;}}},{$sort: {count:1}}, {$skip:50}])
{ &quot;result&quot; : [ { &quot;_id&quot; : &quot;CA&quot;, &quot;count&quot; : 29760021 } ], &quot;ok&quot; : 1 }
&gt; db.zips.aggregate([{$group:{&quot;_id&quot;: &quot;$state&quot;,count: {&quot;$sum&quot;: &quot;$pop&quot;}}},{$skip:50},{$sort: {count:1}}])
{ &quot;result&quot; : [ { &quot;_id&quot; : &quot;ME&quot;, &quot;count&quot; : 1227928 } ], &quot;ok&quot; : 1 }
</code></pre><h4 id="skip"><a href="#skip" class="headerlink" title="$skip"></a>$skip</h4><p>$skip简单来说就是抛弃前面的N个结果，常用在分页中。</p>
<pre><code>&gt; db.zips.aggregate([{$skip:29465}])
{
    &quot;result&quot; : [
        {
            &quot;city&quot; : &quot;SMOOT&quot;,
            &quot;loc&quot; : [
                -110.922351,
                42.619238
            ],
            &quot;pop&quot; : 414,
            &quot;state&quot; : &quot;WY&quot;,
            &quot;_id&quot; : &quot;83126&quot;
        },
        {
            &quot;city&quot; : &quot;THAYNE&quot;,
            &quot;loc&quot; : [
                -111.011354,
                42.933026
            ],
            &quot;pop&quot; : 505,
            &quot;state&quot; : &quot;WY&quot;,
            &quot;_id&quot; : &quot;83127&quot;
        }
    ],
    &quot;ok&quot; : 1
}
</code></pre><h4 id="limit"><a href="#limit" class="headerlink" title="$limit"></a>$limit</h4><p>$limit是用来限制输出的结果数的。</p>
<pre><code>&gt; db.zips.aggregate([{$limit:1}])
{
    &quot;result&quot; : [
        {
            &quot;city&quot; : &quot;ACMAR&quot;,
            &quot;loc&quot; : [
                -86.51557,
                33.584132
            ],
            &quot;pop&quot; : 6055,
            &quot;state&quot; : &quot;AL&quot;,
            &quot;_id&quot; : &quot;35004&quot;
        }
    ],
    &quot;ok&quot; : 1
}
</code></pre><h4 id="project"><a href="#project" class="headerlink" title="$project"></a>$project</h4><p>$project 的作用是选择、构建需要的结果输出，包括重命名、添加字段、删除字段，这都不会修改数据库原有的内容的。<br>$project默认的输出字段是包括”_id”,可以用0、1控制是否显示。</p>
<pre><code>&gt; db.zips.aggregate([{$project: {city:1}}, {$limit:1}])
{ &quot;result&quot; : [ { &quot;city&quot; : &quot;ACMAR&quot;, &quot;_id&quot; : &quot;35004&quot; } ], &quot;ok&quot; : 1 }
&gt; db.zips.aggregate([{$project: {_id:0,city:1}}, {$limit:1}])
{ &quot;result&quot; : [ { &quot;city&quot; : &quot;ACMAR&quot; } ], &quot;ok&quot; : 1 }
</code></pre><p>重命名</p>
<pre><code>&gt; db.zips.aggregate([{$project: {_id:0,城市:&quot;$city&quot;}}, {$limit:1}])
{ &quot;result&quot; : [ { &quot;城市&quot; : &quot;ACMAR&quot; } ], &quot;ok&quot; : 1 }
</code></pre><p>添加字段 </p>
<pre><code>&gt; db.zips.aggregate([{$project: {_id:1,where:{city:&quot;$city&quot;,state:&quot;$state&quot;}}}, {$limit:1}])
{
    &quot;result&quot; : [
        {
            &quot;_id&quot; : &quot;35004&quot;,
            &quot;where&quot; : {
                &quot;city&quot; : &quot;ACMAR&quot;,
                &quot;state&quot; : &quot;AL&quot;
            }
        }
    ],
    &quot;ok&quot; : 1
}
</code></pre><h4 id="unwind"><a href="#unwind" class="headerlink" title="$unwind"></a>$unwind</h4><p>$unwind是用来处理数组类型字段的。假如一条记录里面的数组字段有10个值，可以使用$unwind把这条记录拆成10条。</p>
<pre><code>&gt; db.posts.aggregate({$project:{tags:1}},{$limit:1})
{
    &quot;result&quot; : [
        {
            &quot;_id&quot; : ObjectId(&quot;50ab0f8bbcf1bfe2536dc3f8&quot;),
            &quot;tags&quot; : [
                &quot;trade&quot;,
                &quot;fowl&quot;,
                &quot;forecast&quot;,
                &quot;pest&quot;,
                &quot;professor&quot;,
                &quot;willow&quot;,
                &quot;rise&quot;,
                &quot;brace&quot;,
                &quot;ink&quot;,
                &quot;road&quot;
            ]
        }
    ],
    &quot;ok&quot; : 1
}
&gt; db.posts.aggregate({$project:{tags:1}},{$limit:1},{$unwind:&quot;$tags&quot;})
{
    &quot;result&quot; : [
        {
            &quot;_id&quot; : ObjectId(&quot;50ab0f8bbcf1bfe2536dc3f8&quot;),
            &quot;tags&quot; : &quot;trade&quot;
        },
        {
            &quot;_id&quot; : ObjectId(&quot;50ab0f8bbcf1bfe2536dc3f8&quot;),
            &quot;tags&quot; : &quot;fowl&quot;
        },
        {
            &quot;_id&quot; : ObjectId(&quot;50ab0f8bbcf1bfe2536dc3f8&quot;),
            &quot;tags&quot; : &quot;forecast&quot;
        },
        {
            &quot;_id&quot; : ObjectId(&quot;50ab0f8bbcf1bfe2536dc3f8&quot;),
            &quot;tags&quot; : &quot;pest&quot;
        },
        {
            &quot;_id&quot; : ObjectId(&quot;50ab0f8bbcf1bfe2536dc3f8&quot;),
            &quot;tags&quot; : &quot;professor&quot;
        },
        {
            &quot;_id&quot; : ObjectId(&quot;50ab0f8bbcf1bfe2536dc3f8&quot;),
            &quot;tags&quot; : &quot;willow&quot;
        },
        {
            &quot;_id&quot; : ObjectId(&quot;50ab0f8bbcf1bfe2536dc3f8&quot;),
            &quot;tags&quot; : &quot;rise&quot;
        },
        {
            &quot;_id&quot; : ObjectId(&quot;50ab0f8bbcf1bfe2536dc3f8&quot;),
            &quot;tags&quot; : &quot;brace&quot;
        },
        {
            &quot;_id&quot; : ObjectId(&quot;50ab0f8bbcf1bfe2536dc3f8&quot;),
            &quot;tags&quot; : &quot;ink&quot;
        },
        {
            &quot;_id&quot; : ObjectId(&quot;50ab0f8bbcf1bfe2536dc3f8&quot;),
            &quot;tags&quot; : &quot;road&quot;
        }
    ],
    &quot;ok&quot; : 1
}
&gt; 
</code></pre><p>在blog系统中要实现统计博文的tag出现的次数可以使用$unwind实现。下面的例子只取出现次数最多的3个tag。</p>
<pre><code>&gt; db.posts.aggregate({$project:{tags:1}},{$unwind:&quot;$tags&quot;},{$group: {_id:&quot;$tags&quot;,count:{$sum:1}}},{$sort:{count:-1}},{$limit:3})
{
    &quot;result&quot; : [
        {
            &quot;_id&quot; : &quot;sphynx&quot;,
            &quot;count&quot; : 13
        },
        {
            &quot;_id&quot; : &quot;lunchroom&quot;,
            &quot;count&quot; : 12
        },
        {
            &quot;_id&quot; : &quot;puppy&quot;,
            &quot;count&quot; : 11
        }
    ],
    &quot;ok&quot; : 1
}
</code></pre><p>对于统计tag出现的次数也可以使用MapReduce，下面是我用Go语言写的示例。连接MongoDB用的是<a href="http://labix.org/mgo" target="_blank" rel="external">mgo</a>。Aggregate可以在一定程度上实现需要MapReduce的任务。</p>
<pre><code>type Result struct {
    Key   string &quot;_id&quot;
    Value int
}

func GetTags() (result []Result) {
    job := &amp;mgo.MapReduce{
        Map: &quot;function() { &quot; +
            &quot;    this.Tags.forEach( &quot; +
            &quot;        function(z){emit(z,1);})}&quot;,
        Reduce: &quot;function(key, values) { &quot; +
            &quot;    var total=0; &quot; +
            &quot;    for(var i=0;i&lt;values.length;i++){ &quot; +
            &quot;        total += values[i];} &quot; +
            &quot;    return total;}&quot;,
    }
    conn, err := mgo.Dial(HOST)
    defer conn.Close()
    db := conn.DB(DATABASE)
    articles := db.C(&quot;articles&quot;)
    _, err = articles.Find(nil).MapReduce(job, &amp;result)
    if err != nil {
        panic(err)
    }

    return result
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB-M101-Indexes]]></title>
      <url>http://wendyeq.me/2013/01/16/mongodb-m101-indexes/</url>
      <content type="html"><![CDATA[<p>MongoDB的索引是采用B-tree的结构。MongoDB默认对每个集合的”_id”都建立了唯一的正序索引，而且是不能删除的。</p>
<h4 id="什么情况下适合使用索引"><a href="#什么情况下适合使用索引" class="headerlink" title="什么情况下适合使用索引"></a>什么情况下适合使用索引</h4><ul>
<li>对经常查询的字段需要构建索引</li>
<li>只需获取集合的一小部分记录时（小于集合记录的一半），可以使用索引</li>
<li>大部分应用都适合使用索引，经常要写入的应用就要先用性能工具分析是否应该使用索引</li>
</ul>
<h4 id="构建索引"><a href="#构建索引" class="headerlink" title="构建索引"></a>构建索引</h4><h5 id="简单索引"><a href="#简单索引" class="headerlink" title="简单索引"></a>简单索引</h5><p>构建单一的索引,代码中的“1”表示的是正序，“-1”表示的是倒序。</p>
<pre><code>db.posts.ensureIndex({&apos;permalink&apos;: 1})
db.posts.ensureIndex({&apos;postTime&apos;: -1})
</code></pre><a id="more"></a>
<h5 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h5><p>构建联合索引</p>
<pre><code>db.posts.ensureIndex({&apos;postTime&apos;: -1, &apos;permalink&apos;: 1，&apos;title&apos;: 1})
</code></pre><p>构建联合索引的字段的先后顺序关系到查询的时候能否利用到联合索引,有就是说查询的时候要用到联合索引的一个字段过滤，那么那个字段之前的所有字段要在过滤条件中。</p>
<pre><code>//利用到了联合索引
db.posts.find({&apos;postTime&apos;: date})
db.posts.find({&apos;postTime&apos;: date, &apos;permalink&apos;: permalink})
db.posts.find({&apos;postTime&apos;: date, &apos;permalink&apos;: permalink, &apos;title&apos;: title})
//利用不到联合索引
db.posts.find({&apos;permalink&apos;: permalink})
db.posts.find({&apos;title&apos;: title})
db.posts.find({&apos;postTime&apos;: date, &apos;title&apos;: title})
db.posts.find({&apos;permalink&apos;: permalink, &apos;title&apos;: title})
</code></pre><h5 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h5><p>构建唯一索引</p>
<pre><code>db.posts.ensureIndex({&apos;permalink&apos;: 1}, {unique:true})
</code></pre><h5 id="删除重复记录索引"><a href="#删除重复记录索引" class="headerlink" title="删除重复记录索引"></a>删除重复记录索引</h5><p>构建删除重复记录索引,dropDups要与unique一起使用，dropDups为true会删除posts中permalink重复了的记录，删除了就不能恢复了，要谨慎使用。</p>
<pre><code>db.posts.ensureIndex({&apos;permalink&apos;: 1}, {unique:true, dropDups:true})
</code></pre><h5 id="Sparse-Indexes"><a href="#Sparse-Indexes" class="headerlink" title="Sparse Indexes"></a>Sparse Indexes</h5><p>sparse用于有多条post记录，但是有些记录没有a字段，需要加上<code>sparse: true</code>才能对a生成索引，而没有a字段的记录中的索引值是null，对a进行查询或者排序的时候没有a字段的记录是不参与的。</p>
<pre><code>db.posts.ensureIndex({&apos;a&apos;:1},{sparse: true})
db.posts.find({a:null}) //No documents, because the query uses the index and there are no documents with title:null in the index.
</code></pre><h5 id="MultiKey-Indexes"><a href="#MultiKey-Indexes" class="headerlink" title="MultiKey Indexes"></a>MultiKey Indexes</h5><p>在blog中一般的tags都是数组来的，对数组进行索引就是multiKey index，它会对数组中的每个值都构建索引。假如tags:[“mongodb”,”NoSQL”,”数据库”,”index”]。</p>
<pre><code>db.posts.ensureIndex({tags: 1})
//构建出来的索引如下
｛tags: &quot;mongodb&quot;｝
｛tags: &quot;NoSQL&quot;｝
｛tags: &quot;数据库&quot;｝
｛tags: &quot;index&quot;｝
</code></pre><p>也可以对comments中的date构建索引</p>
<pre><code>db.posts.ensureIndex({&apos;comments.date&apos;: 1})
</code></pre><p>Compound Multikey Indexes May Only Include One Array Field。也就是构建<code>db.foo.ensureIndex({a:1, b: 1})</code>的索引，是不能插入包括多个数组的记录的，如<code>db.foo.insert({a: [1, 2], b: [1, 2]})</code>，但可以插入<code>db.foo.insert({a: [1, 2], b: 1})</code>或<code>db.foo.insert({a: 1, b: [1, 2]})</code>。</p>
<h5 id="Geospatial-Indexes"><a href="#Geospatial-Indexes" class="headerlink" title="Geospatial Indexes"></a>Geospatial Indexes</h5><p><a href="http://docs.mongodb.org/manual/applications/geospatial-indexes/" target="_blank" rel="external">Geospatial indexes</a>地理位置索引,对地理位置的索引原理的解析可以参考<a href="http://blog.nosqlfan.com/html/1811.html" target="_blank" rel="external">图解 MongoDB 地理位置索引的实现原理</a>。假设stores中有<code>&#39;location&#39;:[x, y]</code>，对location构建索引,查询中可以使用<a href="http://docs.mongodb.org/manual/reference/operator/near/#_S_near" target="_blank" rel="external">$near</a>。</p>
<pre><code>db.stores.ensureIndex({&apos;location&apos;: &apos;2d&apos;})
db.stores.find({location: {$near: [x, y]}}).limit(10)
db.runCommand({geoNear: &apos;stores&apos;, near: [50, 50], spherical: true, maxDistance: 1})
</code></pre><h5 id="Foreground-and-Backgound"><a href="#Foreground-and-Backgound" class="headerlink" title="Foreground and Backgound"></a>Foreground and Backgound</h5><p>构建索引的时候默认是foreground的，也可以使用background，如<code>db.posts.ensureIndex({&#39;permalink&#39;: 1}, {background:true})</code>。foreground与background的区别是foreground的构建速度快，会进行写锁定；background的构建速度慢，不会进行锁定。</p>
<p>重建posts的所有索引可以使用<code>db.posts.reIndex()</code>。</p>
<p>索引是有限制的，每个集合不能构建超过64个索引，而且索引的key的长度不能超过1024 bytes。</p>
<h3 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h3><p>查询数据库的所有索引</p>
<pre><code>db.system.indexes.find()
</code></pre><p>查询单个集合的所有索引</p>
<pre><code>db.posts.getIndexes()
</code></pre><p>获取索引的大小</p>
<pre><code>db.posts.totalIndexSize()
</code></pre><p>使用hint指定查询当中使用的索引,也可以使用<a href="http://docs.mongodb.org/manual/reference/operator/natural/" target="_blank" rel="external">$natural</a>指明按自然顺序查询不使用索引。</p>
<pre><code>db.posts.find({&apos;postTime&apos;: date, &apos;permalink&apos;: permalink}).hint( {&apos;permalink&apos;: 1})
db.posts.find({&apos;postTime&apos;: date, &apos;permalink&apos;: permalink}).hint( {$natural: 1})
</code></pre><p>可以使用explain对查询计划进行性能分析</p>
<pre><code>db.posts.find({&apos;postTime&apos;: date, &apos;permalink&apos;: permalink}).explain()
</code></pre><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>“_id”的索引是删除不了的，删除除了”_id”之外的索引</p>
<pre><code>db.posts.dropIndexes() 
</code></pre><p>删除指定的索引</p>
<pre><code>db.posts.dropIndex({&apos;postTime&apos;: -1, &apos;permalink&apos;: 1，&apos;title&apos;: 1})
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB-M101-CRUD]]></title>
      <url>http://wendyeq.me/2013/01/10/mongodb-m101-crud/</url>
      <content type="html"><![CDATA[<p>在<a href="https://education.10gen.com" target="_blank" rel="external">10gen</a>中参与了M101课程，下面的内容是根据M101课程做的笔记。</p>
<p>在Mongo shell中是可以使用javascript语法的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">MongoDB shell version: 2.2.2</div><div class="line">connecting to: <span class="built_in">test</span></div><div class="line">&gt; <span class="keyword">for</span> (i = 0; i &lt; 3; i++)</div><div class="line">Sun Dec 30 16:45:58 SyntaxError: syntax error (shell):1</div><div class="line">&gt; <span class="keyword">for</span> (i = 0; i &lt; 3; i++) <span class="built_in">print</span>(<span class="string">"hello ! "</span>+i)</div><div class="line">hello ! 0</div><div class="line">hello ! 1</div><div class="line">hello ! 2</div><div class="line">&gt; x = 1</div><div class="line">1</div><div class="line">&gt; z = &#123;x:2&#125;</div><div class="line">&#123; <span class="string">"x"</span> : 2 &#125;</div><div class="line">&gt; z.x</div><div class="line">2</div><div class="line">&gt; z[<span class="string">"x"</span>]</div><div class="line">2</div><div class="line">&gt; y = <span class="string">"x"</span></div><div class="line">x</div><div class="line">&gt; z[y]</div><div class="line">2</div><div class="line">&gt; NumberInt(1)</div><div class="line">NumberInt(1)</div><div class="line">&gt; NumberLong(1)+NumberInt(2)</div><div class="line">3</div><div class="line">&gt; NumberInt(1)+NumberLong(2)</div><div class="line">3</div><div class="line">&gt; new Date()</div><div class="line">ISODate(<span class="string">"2012-12-30T08:44:04.636Z"</span>)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><p>MongoDB的新增方法有两个，分别是insert()和save(),insert()和save()的区别是当插入的文档存在”_id”的时候，如果”_id”重复了insert会报错，而save不会，save会更新”_id”对应的文档的内容为新内容。不论是insert或者save，当文档中”_id”不存在的时候，系统会自动生成一个唯一的ObjectId。MongoDB存储的单个BSON文档最大是16M，超过了16M可以使用GridFS存储。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&gt; db.people.find()</div><div class="line">&gt; doc = &#123;name:<span class="string">"smit"</span>&#125;</div><div class="line">&#123; <span class="string">"name"</span> : <span class="string">"smit"</span> &#125;</div><div class="line">&gt; db.people.insert(doc)</div><div class="line">&gt; db.people.insert(doc)</div><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e975348c1ceeb499c26b50"</span>), <span class="string">"name"</span> : <span class="string">"smit"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e975378c1ceeb499c26b51"</span>), <span class="string">"name"</span> : <span class="string">"smit"</span> &#125;</div><div class="line">&gt; doc = &#123;_id : <span class="string">"1"</span>,name:<span class="string">"smit"</span>&#125;</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="string">"1"</span>, <span class="string">"name"</span> : <span class="string">"smit"</span> &#125;</div><div class="line">&gt; db.people.insert(doc)</div><div class="line">&gt; db.people.insert(doc)</div><div class="line">E11000 duplicate key error index: test.people.<span class="variable">$_id_</span>  dup key: &#123; : <span class="string">"1"</span> &#125;</div><div class="line">&gt; doc = &#123;_id : <span class="string">"1"</span>,name:<span class="string">"smitt"</span>&#125;</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="string">"1"</span>, <span class="string">"name"</span> : <span class="string">"smitt"</span> &#125;</div><div class="line">&gt; db.people.insert(doc)</div><div class="line">E11000 duplicate key error index: test.people.<span class="variable">$_id_</span>  dup key: &#123; : <span class="string">"1"</span> &#125;</div><div class="line">&gt; db.people.save(doc)</div><div class="line">&gt; db.people.insert(doc)</div><div class="line">E11000 duplicate key error index: test.people.<span class="variable">$_id_</span>  dup key: &#123; : <span class="string">"1"</span> &#125;</div><div class="line">&gt; db.people.save(doc)</div><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e975348c1ceeb499c26b50"</span>), <span class="string">"name"</span> : <span class="string">"smit"</span> &#125;	</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e975378c1ceeb499c26b51"</span>), <span class="string">"name"</span> : <span class="string">"smit"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="string">"1"</span>, <span class="string">"name"</span> : <span class="string">"smitt"</span> &#125;</div></pre></td></tr></table></figure>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>只查找一个文档用的是findOne,普通的查找用的是find。<br>先使用for循环在scores中插入300条记录,然后分别用findOne和find把他们查出来。使用<code>db.scores.find().pretty()</code>打印出来的数据是比较美观的,pretty起到的是美化的作用。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt; db.scores.find().count()</div><div class="line">0</div><div class="line">&gt; <span class="keyword">for</span>(i=0; i&lt;100;i++)&#123;names=[<span class="string">"exam"</span>, <span class="string">"essay"</span>,<span class="string">"quiz"</span>]; <span class="keyword">for</span>(j=0;j&lt;3;j++)&#123;db.scores.insert(&#123;<span class="string">"student"</span>:i, <span class="string">"type"</span>:names[j], score:Math.round(Math.random()*100) &#125;);&#125;&#125;</div><div class="line"></div><div class="line">&gt; db.scores.find().count()</div><div class="line">300</div><div class="line">&gt; db.scores.<span class="function"><span class="title">findOne</span></span>()</div><div class="line">&#123;</div><div class="line">	<span class="string">"_id"</span> : ObjectId(<span class="string">"50e979508c1ceeb499c26c23"</span>),</div><div class="line">	<span class="string">"student"</span> : 69,</div><div class="line">	<span class="string">"type"</span> : <span class="string">"quiz"</span>,</div><div class="line">	<span class="string">"score"</span> : 98</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查出score大于95小于等于98的所有人：<code>db.scores.find({score:{$gt:95, $lte : 98}})</code>。</p>
<p>查出name中第一个字母大于B、小于F的文档：<code>db.people.find({name : {$gt : &quot;B&quot;, $lt :&quot;F&quot;} })</code></p>
<p>查出表people中存在profession字段的文档：<code>db.people.find({ profession : {$exists : true} })</code></p>
<p>查出表people的name中包含n的文档：<code>db.people.find({name:{$regex : &quot;n&quot;}})</code></p>
<p>查出表people的name中n结尾的文档：<code>db.people.find({name:{$regex : &quot;n$&quot;}})</code></p>
<p>查出表people的name中n开头的文档：<code>db.people.find({name:{$regex : &quot;^n&quot;}})</code></p>
<p>查出表people的name是q结尾或者age字段存在的文档：<code>db.people.find( { $or : [ { name : { $regex : &quot;q$&quot;} }, { age : { $exists : true } } ] } )</code></p>
<p>查出scores中score小于50或者大于90的文档：<code>db.scores.find({ $or : [{&quot;score&quot; : {$lt: 50 }}, {&quot;score&quot; : {$gt : 90}}] })</code>，如果使用<code>db.scores.find( { score : { $lt : 50 }, score : { $gt : 90 } } );</code>只会查出score大于90的文档。</p>
<h5 id="查找文档中的数组"><a href="#查找文档中的数组" class="headerlink" title="查找文档中的数组"></a>查找文档中的数组</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&gt; db.accounts.insert( &#123; name : <span class="string">"George"</span>, favorites : [<span class="string">"ice cream"</span>, <span class="string">"pretzels"</span>] &#125; );</div><div class="line">&gt; db.accounts.insert( &#123; name : <span class="string">"Howard"</span>, favorites : [<span class="string">"pretzels"</span>, <span class="string">"beer"</span>] &#125; );</div><div class="line">&gt; db.accounts.find().<span class="function"><span class="title">pretty</span></span>()</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e7a66b4ce557aaed3099a8"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"George"</span>,</div><div class="line"><span class="string">"favorites"</span> : [</div><div class="line"><span class="string">"ice cream"</span>,</div><div class="line"><span class="string">"pretzels"</span></div><div class="line">]</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e7a68e4ce557aaed3099a9"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"Howard"</span>,</div><div class="line"><span class="string">"favorites"</span> : [</div><div class="line"><span class="string">"pretzels"</span>,</div><div class="line"><span class="string">"beer"</span></div><div class="line">]</div><div class="line">&#125;</div><div class="line">&gt; db.accounts.find(&#123;favorites: <span class="string">"beer"</span>&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7a68e4ce557aaed3099a9"</span>), <span class="string">"name"</span> : <span class="string">"Howard"</span>, <span class="string">"favorites"</span> : [ <span class="string">"pretzels"</span>, <span class="string">"beer"</span> ] &#125;</div><div class="line">&gt; db.accounts.find(&#123;favorites: <span class="string">"pretzels"</span>&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7a66b4ce557aaed3099a8"</span>), <span class="string">"name"</span> : <span class="string">"George"</span>, <span class="string">"favorites"</span> : [ <span class="string">"ice cream"</span>, <span class="string">"pretzels"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7a68e4ce557aaed3099a9"</span>), <span class="string">"name"</span> : <span class="string">"Howard"</span>, <span class="string">"favorites"</span> : [ <span class="string">"pretzels"</span>, <span class="string">"beer"</span> ] &#125;</div></pre></td></tr></table></figure>
<h5 id="in-all"><a href="#in-all" class="headerlink" title="$in $all"></a><code>$in $all</code></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">	db.accounts.insert( &#123; name : <span class="string">"Irving"</span>, favorites : [<span class="string">"beer"</span>, <span class="string">"pretzels"</span>, <span class="string">"cheese"</span>] &#125; );</div><div class="line">db.accounts.insert( &#123; name : <span class="string">"John"</span>, favorites : [<span class="string">"beer"</span>, <span class="string">"cheese"</span>] &#125; ); </div><div class="line">&gt; db.accounts.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7a66b4ce557aaed3099a8"</span>), <span class="string">"name"</span> : <span class="string">"George"</span>, <span class="string">"favorites"</span> : [ <span class="string">"ice cream"</span>, <span class="string">"pretzels"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7a68e4ce557aaed3099a9"</span>), <span class="string">"name"</span> : <span class="string">"Howard"</span>, <span class="string">"favorites"</span> : [ <span class="string">"pretzels"</span>, <span class="string">"beer"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7ce6c355fd8e2e6e82f80"</span>), <span class="string">"name"</span> : <span class="string">"Irving"</span>, <span class="string">"favorites"</span> : [ <span class="string">"beer"</span>, <span class="string">"pretzels"</span>, <span class="string">"cheese"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7ce76355fd8e2e6e82f81"</span>), <span class="string">"name"</span> : <span class="string">"John"</span>, <span class="string">"favorites"</span> : [ <span class="string">"beer"</span>, <span class="string">"cheese"</span> ] &#125;</div><div class="line">&gt; db.accounts.find(&#123;favorites : &#123;<span class="variable">$all</span> : [<span class="string">"pretzels"</span>, <span class="string">"beer"</span>]&#125; &#125;);</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7a68e4ce557aaed3099a9"</span>), <span class="string">"name"</span> : <span class="string">"Howard"</span>, <span class="string">"favorites"</span> : [ <span class="string">"pretzels"</span>, <span class="string">"beer"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7ce6c355fd8e2e6e82f80"</span>), <span class="string">"name"</span> : <span class="string">"Irving"</span>, <span class="string">"favorites"</span> : [ <span class="string">"beer"</span>, <span class="string">"pretzels"</span>, <span class="string">"cheese"</span> ] &#125;</div><div class="line">&gt; db.accounts.find(&#123; name : &#123;<span class="variable">$in</span> : [<span class="string">"Howard"</span>, <span class="string">"John"</span>]&#125;&#125; &#125;);</div><div class="line">Sat Jan 5 14:59:03 SyntaxError: missing ) after argument list (shell):1</div><div class="line">&gt; db.accounts.find(&#123; name : &#123;<span class="variable">$in</span> : [<span class="string">"Howard"</span>, <span class="string">"John"</span>]&#125; &#125;);</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7a68e4ce557aaed3099a9"</span>), <span class="string">"name"</span> : <span class="string">"Howard"</span>, <span class="string">"favorites"</span> : [ <span class="string">"pretzels"</span>, <span class="string">"beer"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7ce76355fd8e2e6e82f81"</span>), <span class="string">"name"</span> : <span class="string">"John"</span>, <span class="string">"favorites"</span> : [ <span class="string">"beer"</span>, <span class="string">"cheese"</span> ] &#125;</div><div class="line">&gt; db.accounts.find(&#123; favorites : &#123;<span class="variable">$in</span> : [<span class="string">"ice cream"</span>, <span class="string">"beer"</span>]&#125; &#125;);</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7a66b4ce557aaed3099a8"</span>), <span class="string">"name"</span> : <span class="string">"George"</span>, <span class="string">"favorites"</span> : [ <span class="string">"ice cream"</span>, <span class="string">"pretzels"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7a68e4ce557aaed3099a9"</span>), <span class="string">"name"</span> : <span class="string">"Howard"</span>, <span class="string">"favorites"</span> : [ <span class="string">"pretzels"</span>, <span class="string">"beer"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7ce6c355fd8e2e6e82f80"</span>), <span class="string">"name"</span> : <span class="string">"Irving"</span>, <span class="string">"favorites"</span> : [ <span class="string">"beer"</span>, <span class="string">"pretzels"</span>, <span class="string">"cheese"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7ce76355fd8e2e6e82f81"</span>), <span class="string">"name"</span> : <span class="string">"John"</span>, <span class="string">"favorites"</span> : [ <span class="string">"beer"</span>, <span class="string">"cheese"</span> ] &#125;</div></pre></td></tr></table></figure>
<h5 id="dot-notation"><a href="#dot-notation" class="headerlink" title="dot notation"></a>dot notation</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; db.users.insert(&#123;name : <span class="string">"richard"</span>, email : &#123;work : <span class="string">"richard@10gen.com"</span>, personal : <span class="string">"kreuter@example.com"</span>&#125; &#125;)</div><div class="line">&gt; db.users.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7e24e355fd8e2e6e82f82"</span>), <span class="string">"name"</span> : <span class="string">"richard"</span>, <span class="string">"email"</span> : &#123; <span class="string">"work"</span> : <span class="string">"richard@10gen.com"</span>, <span class="string">"personal"</span> : <span class="string">"kreuter@example.com"</span> &#125; &#125;</div><div class="line">&gt; db.users.find(&#123;email : &#123;work : <span class="string">"richard@10gen.com"</span>, personal : <span class="string">"kreuter@example.com"</span>&#125;&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7e24e355fd8e2e6e82f82"</span>), <span class="string">"name"</span> : <span class="string">"richard"</span>, <span class="string">"email"</span> : &#123; <span class="string">"work"</span> : <span class="string">"richard@10gen.com"</span>, <span class="string">"personal"</span> : <span class="string">"kreuter@example.com"</span> &#125; &#125;</div><div class="line">&gt; db.users.find(&#123;email : &#123;personal : <span class="string">"kreuter@example.com"</span>, work : <span class="string">"richard@10gen.com"</span>&#125;&#125;)</div><div class="line">&gt; </div><div class="line">&gt; db.users.find(&#123;email : &#123;personal : <span class="string">"kreuter@example.com"</span>&#125;&#125;)</div><div class="line">&gt; db.users.find(&#123;<span class="string">"email.personal"</span> : <span class="string">"kreuter@example.com"</span>&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e7e24e355fd8e2e6e82f82"</span>), <span class="string">"name"</span> : <span class="string">"richard"</span>, <span class="string">"email"</span> : &#123; <span class="string">"work"</span> : <span class="string">"richard@10gen.com"</span>, <span class="string">"personal"</span> : <span class="string">"kreuter@example.com"</span> &#125; &#125;</div></pre></td></tr></table></figure>
<h5 id="Cursors"><a href="#Cursors" class="headerlink" title="Cursors"></a>Cursors</h5><p>可以使用<code>var cur = db.people.find();</code>cursor，<code>cur.hasNext()</code>检查是否还有文档，<code>cur.next()</code>获取文档然后cur指向下一个文档。<code>cur.sort({ name : -1}).limit(3).skip(2);</code>根据name到排序，限制只取3条记录，跳过前面2条记录。无论sort、limit、skip的先后顺序是怎样如<code>cur.skip(2).limit(3).sort({ name : -1});</code>，mongodb执行的时候都是先sort，然后skip，最后才是limit</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">&gt; cur = db.people.find(); null;</div><div class="line">null</div><div class="line">&gt; cur.hasNext()</div><div class="line"><span class="literal">true</span></div><div class="line">&gt; cur.<span class="function"><span class="title">next</span></span>()</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"Wendyeq"</span>,</div><div class="line"><span class="string">"age"</span> : 24,</div><div class="line"><span class="string">"profession"</span> : <span class="string">"hacker"</span></div><div class="line">&#125;</div><div class="line">&gt; <span class="keyword">while</span> (cur.hasNext()) printjson(cur.next());</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"wen"</span>,</div><div class="line"><span class="string">"age"</span> : 24,</div><div class="line"><span class="string">"profession"</span> : <span class="string">"hacker"</span></div><div class="line">&#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"name"</span> : 42 &#125;</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"Fred"</span>,</div><div class="line"><span class="string">"age"</span> : 30</div><div class="line">&#125;</div><div class="line">&gt; cur = db.people.find(); null;</div><div class="line">null</div><div class="line">&gt; cur.limit(2); null;</div><div class="line">null</div><div class="line">&gt; <span class="keyword">while</span> (cur.hasNext()) printjson(cur.next());</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"Wendyeq"</span>,</div><div class="line"><span class="string">"age"</span> : 24,</div><div class="line"><span class="string">"profession"</span> : <span class="string">"hacker"</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"wen"</span>,</div><div class="line"><span class="string">"age"</span> : 24,</div><div class="line"><span class="string">"profession"</span> : <span class="string">"hacker"</span></div><div class="line">&#125;</div><div class="line">&gt; cur = db.people.find(); null;</div><div class="line">null</div><div class="line">&gt; cur.sort(&#123; name : -1&#125;); null;</div><div class="line">null</div><div class="line">&gt; <span class="keyword">while</span> (cur.hasNext()) printjson(cur.next());</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"wen"</span>,</div><div class="line"><span class="string">"age"</span> : 24,</div><div class="line"><span class="string">"profession"</span> : <span class="string">"hacker"</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"Wendyeq"</span>,</div><div class="line"><span class="string">"age"</span> : 24,</div><div class="line"><span class="string">"profession"</span> : <span class="string">"hacker"</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"Fred"</span>,</div><div class="line"><span class="string">"age"</span> : 30</div><div class="line">&#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"name"</span> : 42 &#125;</div><div class="line">&gt; cur = db.people.find(); null;</div><div class="line">null</div><div class="line">&gt; cur.sort(&#123; name : -1&#125;).limit(3); null;</div><div class="line">null</div><div class="line">&gt; <span class="keyword">while</span> (cur.hasNext()) printjson(cur.next());</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"wen"</span>,</div><div class="line"><span class="string">"age"</span> : 24,</div><div class="line"><span class="string">"profession"</span> : <span class="string">"hacker"</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"Wendyeq"</span>,</div><div class="line"><span class="string">"age"</span> : 24,</div><div class="line"><span class="string">"profession"</span> : <span class="string">"hacker"</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"Fred"</span>,</div><div class="line"><span class="string">"age"</span> : 30</div><div class="line">&#125;</div><div class="line">&gt; cur = db.people.find(); null;</div><div class="line">null</div><div class="line">&gt; cur.sort(&#123; name : -1&#125;).limit(3).skip(2); null;</div><div class="line">null</div><div class="line">&gt; <span class="keyword">while</span> (cur.hasNext()) printjson(cur.next());</div><div class="line">&#123;</div><div class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>),</div><div class="line"><span class="string">"name"</span> : <span class="string">"Fred"</span>,</div><div class="line"><span class="string">"age"</span> : 30</div><div class="line">&#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"name"</span> : 42 &#125;</div><div class="line">&gt;</div><div class="line">&gt; db.people.count()</div><div class="line">4</div></pre></td></tr></table></figure>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>普通的更新操作一般只会保留”_id”不变，其他的字段替换为新值或者删除也就是完全替换成新的文档。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>), <span class="string">"name"</span> : <span class="string">"Wendyeq"</span>, <span class="string">"age"</span> : 24, <span class="string">"profession"</span> : <span class="string">"hacker"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"name"</span> : <span class="string">"wen"</span>, <span class="string">"age"</span> : 24, <span class="string">"profession"</span> : <span class="string">"hacker"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"name"</span> : 42 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"name"</span> : <span class="string">"Fred"</span>, <span class="string">"age"</span> : 30 &#125;</div><div class="line">&gt; db.people.update(&#123;name : <span class="string">"wen"</span>&#125;,&#123; name : <span class="string">"Thompson"</span>, salary : 50000&#125;);</div><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>), <span class="string">"name"</span> : <span class="string">"Wendyeq"</span>, <span class="string">"age"</span> : 24, <span class="string">"profession"</span> : <span class="string">"hacker"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"name"</span> : <span class="string">"Thompson"</span>, <span class="string">"salary"</span> : 50000 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"name"</span> : 42 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"name"</span> : <span class="string">"Fred"</span>, <span class="string">"age"</span> : 30 &#125;</div></pre></td></tr></table></figure>
<p>可以使用$set来替换指定的字段的值，使用$inc对数字自增。<code>db.people.update({name:&quot;Fred&quot;}, {$inc : {age : 2}})</code>表示age加2。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>), <span class="string">"name"</span> : <span class="string">"Wendyeq"</span>, <span class="string">"age"</span> : 24, <span class="string">"profession"</span> : <span class="string">"hacker"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"name"</span> : <span class="string">"Thompson"</span>, <span class="string">"salary"</span> : 50000 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"name"</span> : 42 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"name"</span> : <span class="string">"Fred"</span>, <span class="string">"age"</span> : 30 &#125;</div><div class="line">&gt; db.people.update(&#123;name:<span class="string">"Fred"</span>&#125;, &#123;<span class="variable">$set</span> : &#123;age : 35&#125;&#125;)</div><div class="line">&gt; db.people.find(&#123;name:<span class="string">"Fred"</span>&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"name"</span> : <span class="string">"Fred"</span>, <span class="string">"age"</span> : 35 &#125;</div><div class="line">&gt; db.people.update(&#123;name:<span class="string">"Fred"</span>&#125;, &#123;<span class="variable">$inc</span> : &#123;age : 1&#125;&#125;)</div><div class="line">&gt; db.people.find(&#123;name:<span class="string">"Fred"</span>&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"name"</span> : <span class="string">"Fred"</span>, <span class="string">"age"</span> : 36 &#125;</div><div class="line">&gt; db.people.update(&#123;name:42&#125;, &#123;<span class="variable">$set</span> : &#123;age : 35&#125;&#125;)</div><div class="line">&gt; db.people.find(&#123;name:42&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"age"</span> : 35, <span class="string">"name"</span> : 42 &#125;</div></pre></td></tr></table></figure>
<p>在更新中使用$unset删除不需要的字段,$unset后面的1或者-1结果都一样，不知道有什么影响。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>), <span class="string">"name"</span> : <span class="string">"Wendyeq"</span>, <span class="string">"age"</span> : 24, <span class="string">"profession"</span> : <span class="string">"hacker"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"name"</span> : <span class="string">"Thompson"</span>, <span class="string">"salary"</span> : 50000 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"name"</span> : <span class="string">"Fred"</span>, <span class="string">"age"</span> : 36 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"age"</span> : 35, <span class="string">"name"</span> : 42 &#125;</div><div class="line">&gt; db.people.update(&#123;name : <span class="string">"Wendyeq"</span>&#125;, &#123; <span class="variable">$unset</span> : &#123; profession : 1&#125;&#125;);</div><div class="line">&gt; db.people.find(&#123;name:<span class="string">"Wendyeq"</span>&#125;);</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>), <span class="string">"age"</span> : 24, <span class="string">"name"</span> : <span class="string">"Wendyeq"</span> &#125;</div><div class="line">&gt; db.people.update(&#123;salary : 50000&#125;, &#123; <span class="variable">$unset</span> : &#123; name : -1&#125;&#125;);</div><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>), <span class="string">"age"</span> : 24, <span class="string">"name"</span> : <span class="string">"Wendyeq"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"salary"</span> : 50000 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"name"</span> : <span class="string">"Fred"</span>, <span class="string">"age"</span> : 36 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"age"</span> : 35, <span class="string">"name"</span> : 42 &#125;</div></pre></td></tr></table></figure>
<p>对文档中的数组属性可以使用$push，在数组最后添加一个元素。使用$pop删除一个元素，<code>db.arrays.update( {_id : 0}, { $pop : { a : 1 } } );</code>表示删除最后一个元素，<code>db.arrays.update( {_id : 0}, { $pop : { a : -1 } } );</code>表示删除第一个元素。$pushAll批量添加数组元素。$pull根据值删除数组元素。$pullAllg根据值批量删除数组元素。$addToSet添加数组中不存在的值。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&gt; db.arrays.insert(&#123; _id : 0, a : [1, 2, 3, 4] &#125;);</div><div class="line">&gt; db.arrays.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : 0, <span class="string">"a"</span> : [ 1, 2, 3, 4 ] &#125;</div><div class="line">&gt; db.arrays.update( &#123;_id : 0&#125;, &#123; <span class="variable">$set</span> : &#123; <span class="string">"a.2"</span> : 5 &#125; &#125; );</div><div class="line">&gt; db.arrays.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : 0, <span class="string">"a"</span> : [ 1, 2, 5, 4 ] &#125;</div><div class="line">&gt; db.arrays.update( &#123;_id : 0&#125;, &#123; <span class="variable">$push</span> : &#123; a : 6 &#125; &#125; );</div><div class="line">&gt; db.arrays.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : 0, <span class="string">"a"</span> : [ 1, 2, 5, 4, 6 ] &#125;</div><div class="line">&gt; db.arrays.update( &#123;_id : 0&#125;, &#123; <span class="variable">$pop</span> : &#123; a : 1 &#125; &#125; );</div><div class="line">&gt; db.arrays.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : 0, <span class="string">"a"</span> : [ 1, 2, 5, 4 ] &#125;</div><div class="line">&gt; db.arrays.update( &#123;_id : 0&#125;, &#123; <span class="variable">$pop</span> : &#123; a : -1 &#125; &#125; );</div><div class="line">&gt; db.arrays.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : 0, <span class="string">"a"</span> : [ 2, 5, 4 ] &#125;</div><div class="line">&gt; db.arrays.update( &#123;_id : 0&#125;, &#123; <span class="variable">$pushAll</span> : &#123; a : [ 7, 8, 9] &#125; &#125; );</div><div class="line">&gt; db.arrays.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : 0, <span class="string">"a"</span> : [ 2, 5, 4, 7, 8, 9 ] &#125;</div><div class="line">&gt; db.arrays.update( &#123;_id : 0&#125;, &#123; <span class="variable">$pull</span> : &#123; a : 5 &#125; &#125; );</div><div class="line">&gt; db.arrays.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : 0, <span class="string">"a"</span> : [ 2, 4, 7, 8, 9 ] &#125;</div><div class="line">&gt; db.arrays.update( &#123;_id : 0&#125;, &#123; <span class="variable">$pullAll</span> : &#123; a : [2, 4, 8] &#125; &#125; );</div><div class="line">&gt; db.arrays.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : 0, <span class="string">"a"</span> : [ 7, 9 ] &#125;</div><div class="line">&gt; db.arrays.update( &#123;_id : 0&#125;, &#123; <span class="variable">$addToSet</span> : &#123; a : 5 &#125; &#125; );</div><div class="line">&gt; db.arrays.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : 0, <span class="string">"a"</span> : [ 7, 9, 5 ] &#125;</div><div class="line">&gt; db.arrays.update( &#123;_id : 0&#125;, &#123; <span class="variable">$addToSet</span> : &#123; a : 5 &#125; &#125; );</div><div class="line">&gt; db.arrays.update( &#123;_id : 0&#125;, &#123; <span class="variable">$addToSet</span> : &#123; a : 5 &#125; &#125; );</div><div class="line">&gt; db.arrays.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : 0, <span class="string">"a"</span> : [ 7, 9, 5 ] &#125;</div><div class="line">&gt; db.arrays.update( &#123;_id : 0&#125;, &#123; <span class="variable">$pushAll</span> : &#123; a : [ 7, 8, 9] &#125; &#125; );</div><div class="line">&gt; db.arrays.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : 0, <span class="string">"a"</span> : [ 7, 9, 5, 7, 8, 9 ] &#125;</div><div class="line">&gt; db.arrays.update( &#123;_id : 0&#125;, &#123; <span class="variable">$pop</span> : &#123; a : -2 &#125; &#125; );</div><div class="line">&gt; db.arrays.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : 0, <span class="string">"a"</span> : [ 9, 5, 7, 8, 9 ] &#125;</div><div class="line">&gt; db.arrays.update( &#123;_id : 0&#125;, &#123; <span class="variable">$pull</span> : &#123; a : 9 &#125; &#125; );</div><div class="line">&gt; db.arrays.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : 0, <span class="string">"a"</span> : [ 5, 7, 8 ] &#125;</div></pre></td></tr></table></figure>
<p>upsert means update or insert if not present.<br>upsert为true表示如果没有符合条件的文档就新建一个文档，如果有符合条件的稳定就更新。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>), <span class="string">"age"</span> : 24, <span class="string">"name"</span> : <span class="string">"Wendyeq"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"salary"</span> : 50000 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"name"</span> : <span class="string">"Fred"</span>, <span class="string">"age"</span> : 36 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"age"</span> : 35, <span class="string">"name"</span> : 42 &#125;</div><div class="line">&gt; db.people.update( &#123; name : <span class="string">"George"</span>&#125;, &#123;<span class="variable">$set</span> : &#123;age : 40&#125;&#125; )</div><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>), <span class="string">"age"</span> : 24, <span class="string">"name"</span> : <span class="string">"Wendyeq"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"salary"</span> : 50000 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"name"</span> : <span class="string">"Fred"</span>, <span class="string">"age"</span> : 36 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"age"</span> : 35, <span class="string">"name"</span> : 42 &#125;</div><div class="line">&gt; db.people.update( &#123; name : <span class="string">"George"</span>&#125;, &#123;<span class="variable">$set</span> : &#123;age : 40&#125;&#125;, &#123;upsert : <span class="literal">true</span>&#125; )</div><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>), <span class="string">"age"</span> : 24, <span class="string">"name"</span> : <span class="string">"Wendyeq"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"salary"</span> : 50000 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"name"</span> : <span class="string">"Fred"</span>, <span class="string">"age"</span> : 36 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"age"</span> : 35, <span class="string">"name"</span> : 42 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e8fb790b336d073077842b"</span>), <span class="string">"age"</span> : 40, <span class="string">"name"</span> : <span class="string">"George"</span> &#125;</div><div class="line">&gt; db.people.update( &#123; age : &#123;<span class="variable">$gt</span> : 35&#125; &#125;, &#123;<span class="variable">$set</span> : &#123;name : <span class="string">"William"</span>&#125;&#125;, &#123;upsert : <span class="literal">true</span>&#125; )</div><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>), <span class="string">"age"</span> : 24, <span class="string">"name"</span> : <span class="string">"Wendyeq"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"salary"</span> : 50000 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"age"</span> : 35, <span class="string">"name"</span> : 42 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e8fb790b336d073077842b"</span>), <span class="string">"age"</span> : 40, <span class="string">"name"</span> : <span class="string">"George"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"age"</span> : 36, <span class="string">"name"</span> : <span class="string">"William"</span> &#125;</div></pre></td></tr></table></figure>
<p>multi为true的话可以批量添加字段。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>), <span class="string">"age"</span> : 24, <span class="string">"name"</span> : <span class="string">"Wendyeq"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"salary"</span> : 50000 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"age"</span> : 35, <span class="string">"name"</span> : 42 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e8fb790b336d073077842b"</span>), <span class="string">"age"</span> : 40, <span class="string">"name"</span> : <span class="string">"George"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"age"</span> : 36, <span class="string">"name"</span> : <span class="string">"William"</span> &#125;</div><div class="line">&gt; db.people.update( &#123;&#125;, &#123;<span class="variable">$set</span> : &#123;title : <span class="string">"Dr"</span> &#125; &#125;, &#123;multi : <span class="literal">true</span>&#125;);</div><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>), <span class="string">"age"</span> : 24, <span class="string">"name"</span> : <span class="string">"Wendyeq"</span>, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"salary"</span> : 50000, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"age"</span> : 35, <span class="string">"name"</span> : 42, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e8fb790b336d073077842b"</span>), <span class="string">"age"</span> : 40, <span class="string">"name"</span> : <span class="string">"George"</span>, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"age"</span> : 36, <span class="string">"name"</span> : <span class="string">"William"</span>, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>remove可以删除集合中的所有记录，drop删除集合结构，drop之后可以用show collections验证。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e00064405fe32e05c6e6c0"</span>), <span class="string">"age"</span> : 24, <span class="string">"name"</span> : <span class="string">"Wendyeq"</span>, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"salary"</span> : 50000, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"age"</span> : 35, <span class="string">"name"</span> : 42, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e8fb790b336d073077842b"</span>), <span class="string">"age"</span> : 40, <span class="string">"name"</span> : <span class="string">"George"</span>, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"age"</span> : 36, <span class="string">"name"</span> : <span class="string">"William"</span>, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&gt; db.people.remove(&#123;name : <span class="string">"Wendyeq"</span>&#125;)</div><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"salary"</span> : 50000, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"age"</span> : 35, <span class="string">"name"</span> : 42, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e8fb790b336d073077842b"</span>), <span class="string">"age"</span> : 40, <span class="string">"name"</span> : <span class="string">"George"</span>, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e82ff4803d1a0d947eb66e"</span>), <span class="string">"age"</span> : 36, <span class="string">"name"</span> : <span class="string">"William"</span>, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&gt; db.people.remove(&#123;name : &#123;<span class="variable">$gt</span> : <span class="string">"G"</span>&#125;&#125;)</div><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e001de405fe32e05c6e6c1"</span>), <span class="string">"salary"</span> : 50000, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50e10b8ff5448477652e2365"</span>), <span class="string">"age"</span> : 35, <span class="string">"name"</span> : 42, <span class="string">"title"</span> : <span class="string">"Dr"</span> &#125;</div><div class="line">&gt; db.people.remove()</div><div class="line">&gt; db.people.find()</div><div class="line">&gt; db.people.drop()</div><div class="line"><span class="literal">true</span></div></pre></td></tr></table></figure>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>可以使用getLastError来获取最后出错的日志。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&gt; db.people.insert(&#123;_id : <span class="string">"Smith"</span>, age : 30&#125;)</div><div class="line">&gt; db.people.insert(&#123;_id : <span class="string">"Smith"</span>, age : 30&#125;)</div><div class="line">E11000 duplicate key error index: test.people.<span class="variable">$_id_</span> dup key: &#123; : <span class="string">"Smith"</span> &#125;</div><div class="line">&gt; db.runCommand(&#123;getLastError : 1&#125;)</div><div class="line">&#123;</div><div class="line"><span class="string">"err"</span> : <span class="string">"E11000 duplicate key error index: test.people.<span class="variable">$_id_</span> dup key: &#123; : \"Smith\" &#125;"</span>,</div><div class="line"><span class="string">"code"</span> : 11000,</div><div class="line"><span class="string">"n"</span> : 0,</div><div class="line"><span class="string">"connectionId"</span> : 1,</div><div class="line"><span class="string">"ok"</span> : 1</div><div class="line">&#125;</div><div class="line">&gt; db.people.insert(&#123;_id : <span class="string">"Jones"</span>, age : 30&#125;)</div><div class="line">&gt; db.runCommand(&#123;getLastError : 1&#125;)</div><div class="line">&#123; <span class="string">"n"</span> : 0, <span class="string">"connectionId"</span> : 1, <span class="string">"err"</span> : null, <span class="string">"ok"</span> : 1 &#125;</div><div class="line">&gt; db.people.update(&#123;&#125;, &#123;<span class="variable">$set</span>: &#123;title:<span class="string">"Dr"</span>&#125;&#125;, &#123;multi : <span class="literal">true</span>&#125;);</div><div class="line">&gt; db.runCommand(&#123;getLastError : 1&#125;)</div><div class="line">&#123;</div><div class="line"><span class="string">"updatedExisting"</span> : <span class="literal">true</span>,</div><div class="line"><span class="string">"n"</span> : 2,</div><div class="line"><span class="string">"connectionId"</span> : 1,</div><div class="line"><span class="string">"err"</span> : null,</div><div class="line"><span class="string">"ok"</span> : 1</div><div class="line">&#125;</div><div class="line">&gt; db.people.update(&#123;name : <span class="string">"Thompson"</span>&#125;, &#123;<span class="variable">$set</span>: &#123;title:<span class="string">"Dr"</span>&#125;&#125;, &#123;upsert : <span class="literal">true</span>&#125;);</div><div class="line">&gt; db.runCommand(&#123;getLastError : 1&#125;)</div><div class="line">&#123;</div><div class="line"><span class="string">"updatedExisting"</span> : <span class="literal">false</span>,</div><div class="line"><span class="string">"upserted"</span> : ObjectId(<span class="string">"50e90f390b336d073077842c"</span>),</div><div class="line"><span class="string">"n"</span> : 1,</div><div class="line"><span class="string">"connectionId"</span> : 1,</div><div class="line"><span class="string">"err"</span> : null,</div><div class="line"><span class="string">"ok"</span> : 1</div><div class="line">&#125;</div><div class="line">&gt; db.people.remove()</div><div class="line">&gt; db.runCommand(&#123;getLastError : 1&#125;)</div><div class="line">&#123; <span class="string">"n"</span> : 3, <span class="string">"connectionId"</span> : 1, <span class="string">"err"</span> : null, <span class="string">"ok"</span> : 1 &#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mongodb安装]]></title>
      <url>http://wendyeq.me/2013/01/01/install-mongodb/</url>
      <content type="html"><![CDATA[<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><p>到<a href="http://www.mongodb.org/downloads" target="_blank" rel="external">http://www.mongodb.org/downloads</a>下载适合的版本（32位版本的最多只能存储2GB左右的数据）。Go语言版本的驱动推荐使用mgo–<a href="http://labix.org/mgo" target="_blank" rel="external">http://labix.org/mgo</a>。</p>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p>我使用的是32位的Linuxmint,我下载的文件是mongodb-linux-i686-2.2.2.tgz，安装目录是/opt下面。解压<code>tar zxvf mongodb-linux-i686-2.2.2.tgz</code>,得到了mongodb-linux-i686-2.2.2文件夹。移动到安装目录<code>sudo mv mongodb-linux-i686-2.2.2 /opt/mongodb</code>。</p>
<p>到目前为止如果直接启动mongodb<code>sudo /opt/mongodb/bin/mongod</code>将会得到一个错误，mongodb默认的数据存储位置是”/data/db”,当然也可以使用参数–dbpath指定数据的存储位置。我个人采用默认的存储位置，所以需要新建“/data/db”路径<code>sudo mkdir -p /data/db</code>。</p>
<pre><code>ERROR: dbpath (/data/db/) does not exist.
 Create this directory or give existing directory in --dbpath.
See http://dochub.mongodb.org/core/startingandstoppingmongo
</code></pre><p>现在启动mongodb就不会报错了<code>sudo /opt/mongodb/bin/mongod</code>。<br>验证一下是否安装正确了，mongodb默认连接的库是”test”,可以在”test”库中的插入一条记录，然后再把这条记录查出来，验证是否原来的记录。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wendyeq@wendyeq-mint ~ $ /opt/mongodb/bin/mongo</div><div class="line">MongoDB shell version: 2.2.2</div><div class="line">connecting to: <span class="built_in">test</span></div><div class="line">&gt; db.article.save(&#123;title:<span class="string">"article title"</span>&#125;)</div><div class="line">&gt; db.article.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50d9a9d778222df26d43440c"</span>), <span class="string">"title"</span> : <span class="string">"article title"</span> &#125;</div><div class="line">&gt; quit()</div></pre></td></tr></table></figure>
<p>正确关闭mongodb数据库的方法是在mongo client中use admin,然后执行db.shutdownServer()。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wendyeq@wendyeq-mint ~ $ /opt/mongodb/bin/mongo</div><div class="line">MongoDB shell version: 2.2.2</div><div class="line">connecting to: <span class="built_in">test</span></div><div class="line">&gt; use admin</div><div class="line">switched to db admin</div><div class="line">&gt; db.shutdownServer()</div></pre></td></tr></table></figure>
<h3 id="3-备份与恢复"><a href="#3-备份与恢复" class="headerlink" title="3. 备份与恢复"></a>3. 备份与恢复</h3><p>mongodb的备份命令是<code>mongodump -d dbname -o outdirector</code>，恢复命令是<code>mongorestore - d dbname outdirect/dbname</code></p>
<p>比如我要把test数据库备份到home目录下的db文件夹</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/mongodb/bin/mongodump <span class="_">-d</span> <span class="built_in">test</span> -o db</div></pre></td></tr></table></figure>
<p>把db文件夹里面的test库恢复回去，加了参数–drop会把目前正在使用的test库的数据清空，然后把备份的数据插入回去。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/mongodb/bin/mongorestore <span class="_">-d</span> <span class="built_in">test</span> --drop db/<span class="built_in">test</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2012年总结]]></title>
      <url>http://wendyeq.me/2012/12/31/summary-of-2012/</url>
      <content type="html"><![CDATA[<p>2012年，忙忙碌碌的一年，在年底的时候由于个人原因离开了待了两年的公司。</p>
<h3 id="经济方面"><a href="#经济方面" class="headerlink" title="经济方面"></a>经济方面</h3><p>投资都是要花很多时间去研究，去盯盘的，没有时间的话最好就是眼看手别动。</p>
<ol>
<li><p>尝试了新的投资品种–白银TD。白银TD是风险很大的投资品种，5倍的杠杆。刚开始的时候还是赚了点钱的，结果上两周由于美国财政悬崖的问题白银暴跌了，每手最大的跌幅达到500多元。当时我是做多的，由于回老家了，没有看盘，没有走掉，结果亏了不少。</p>
</li>
<li><p>基金方面一直都在坚持定投，但是没有什么收成。</p>
</li>
<li><p>买了银华鑫利，结果遇上了银华鑫利的到点折算，也是由于没有认真看盘和清楚的了解风险，结果遇到大风险事件没有走掉。</p>
</li>
</ol>
<h3 id="学习方面"><a href="#学习方面" class="headerlink" title="学习方面"></a>学习方面</h3><ol>
<li><p>学习贵在坚持，不过这一年基本都没有因为一件事而坚持超过两个星期。</p>
</li>
<li><p>在扇贝网坚持打卡436天(今年打卡286天)。<a href="http://www.shanbay.com/bdc/review/progress/334338" target="_blank" rel="external">打卡记录</a></p>
</li>
<li><p>报名了沪江的BEC商务英语【初中级10月通关班】，准备13年的时候报考BEC中级，要坚持。</p>
</li>
<li><p>用Golang重写了这个blog。</p>
</li>
</ol>
<h3 id="生活方面"><a href="#生活方面" class="headerlink" title="生活方面"></a>生活方面</h3><ol>
<li><p>每周都坚持锻炼身体。</p>
</li>
<li><p>工作日大部分是在外面吃，周末一般是自己煮。</p>
</li>
</ol>
<p><strong>2013年要认真找工作了。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Go语法笔记]]></title>
      <url>http://wendyeq.me/2012/12/18/go/</url>
      <content type="html"><![CDATA[<p>之前阅读<a href="http://tour.golang.org" target="_blank" rel="external">A Tour of Go</a>的时候做了些笔记，现在把她整理好发出来。</p>
<h3 id="1-第一个程序"><a href="#1-第一个程序" class="headerlink" title="1. 第一个程序"></a>1. 第一个程序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(<span class="string">"Hello World!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序运行需要在main包下面，并且从main()函数开始运行<code>package main</code></p>
<p>导入包可以是分开来写<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"math"</span></div></pre></td></tr></table></figure></p>
<p>也可以是写在一起<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"math"</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>程序默认是按行来分割，如果不按行分割的话要用分号隔开<code>import (&quot;fmt&quot; ; &quot;math&quot;)</code></p>
<p>导入的包可以重命名，但是一般不建议这么做。在同时需要导入最终包名相同的包如<code>html/template</code>和<code>text/template</code>的时候倒是可以这样做。<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> htmlTemplate "html/template</div><div class="line"><span class="keyword">import</span> "text/template"</div></pre></td></tr></table></figure></p>
<p>也可以忽略掉导入的包,一般是用于第三方库中的依赖，但是自己写代码时用不到的包<code>import _ &quot;fmt&quot;</code><br><a id="more"></a>    </p>
<h3 id="2-函数的定义"><a href="#2-函数的定义" class="headerlink" title="2. 函数的定义"></a>2. 函数的定义</h3><p>func 是定义函数的关键字，返回值类型写在后面。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="keyword">int</span>, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参数类型相同的话，可以把多个变量名写在前面，类型写在后面。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数可以有多个返回值，error通常是最后一个返回值。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y, z <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> z, x, y</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>返回值里面有变量名的话，函数体里面不用再次声明。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="keyword">int</span>)</span> <span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    x = sum * <span class="number">4</span>/<span class="number">9</span></div><div class="line">    y = sum - x</div><div class="line">    <span class="keyword">return</span></div><div class="line">    <span class="comment">//return x, y 这样写也可以</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>内部函数<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">func</span> <span class="selector-tag">main</span>() &#123;</div><div class="line">    <span class="attribute">hypot </span>:= <span class="built_in">func</span>(x, y float64) float64 &#123;</div><div class="line">        return math.<span class="built_in">Sqrt</span>(x*x + y*y) </div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">fmt</span><span class="selector-class">.Println</span>(<span class="selector-tag">hypot</span>(3, 4))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h3><p>Go没有使用public、private之类的关键字定义变量的可访问性，Go是通过变量名的第一个字母是否大写这种代码风格区别的，第一个字母是大写的话就相当于public,小写的话就是private。<code>var</code>定义的是全局变量或局部变量。<code>:=</code>声明与初始化局部变量，只能放在函数体里面。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> c, python, java bool</div><div class="line"><span class="selector-tag">var</span> c, python, java = true, false, <span class="string">"no!"</span></div><div class="line"><span class="selector-tag">a</span>, <span class="selector-tag">b</span>, c := swap(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"!"</span>)</div></pre></td></tr></table></figure></p>
<p>const定义常量<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const Pi = <span class="number">3.14</span></div><div class="line">const (</div><div class="line">    Big = <span class="number">1</span>&lt;&lt;<span class="number">100</span></div><div class="line">    Small = Big&gt;&gt;<span class="number">99</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>声明一个key是string, value是int类型的map<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></div></pre></td></tr></table></figure></p>
<h3 id="4-for-循环"><a href="#4-for-循环" class="headerlink" title="4. for 循环"></a>4. for 循环</h3><p>比起其他语言，Go的for循环少了两个括号,但大括号是必须的。<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sum :=<span class="number">0</span></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> := <span class="number">0</span>; <span class="built_in">i</span> &lt;<span class="number">10</span>; <span class="built_in">i</span>++ &#123;</div><div class="line">    sum += i</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>缺省步长的形式,类似其他语言的while语句，Go语句是没有<code>while</code>关键字的，即没有while语句。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ; <span class="keyword">sum</span> &lt; <span class="number">1000</span>; &#123;</div><div class="line">    <span class="keyword">sum</span> += <span class="keyword">sum</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//两个分号可以不写</span></div><div class="line"><span class="keyword">for</span> <span class="keyword">sum</span> &lt;<span class="number">1000</span> &#123;</div><div class="line">    <span class="keyword">sum</span> += <span class="keyword">sum</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>死循环<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ; ; &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//或者也把分号省略掉</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-if判断语句"><a href="#5-if判断语句" class="headerlink" title="5. if判断语句"></a>5. if判断语句</h3><p>与for类似if后面也是没有括号的，大括号是必须的。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</div><div class="line">    <span class="keyword">fmt</span>.Println(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>多个判断条件，可以使用<code>&amp;&amp;</code>或者<code>||</code><br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> x &gt;<span class="number">0</span> &amp;&amp; x &lt; <span class="number">100</span> &#123;</div><div class="line">    <span class="keyword">fmt</span>.Println(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>if</code>、 <code>else if</code> 、<code>else</code>的形式<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> v := math.Pow(x, n) ; v &lt; lim &#123;</div><div class="line">    <span class="keyword">return</span> v</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> v &gt; lim &#123;</div><div class="line">    <span class="keyword">return</span> lim</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//变量 v 的作用范围到这里就结束了，</span></div><div class="line"><span class="comment">//就算不return后面的语句如果直接使用v如：</span></div><div class="line"><span class="comment">//fmt.Println(v)会报 “undefinded： v” 的错误</span></div></pre></td></tr></table></figure></p>
<h3 id="6-基本的数据类型"><a href="#6-基本的数据类型" class="headerlink" title="6. 基本的数据类型"></a>6. 基本的数据类型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span></div><div class="line"><span class="keyword">string</span></div><div class="line"><span class="keyword">int</span> <span class="keyword">int8</span> <span class="keyword">int16</span> <span class="keyword">int32</span> <span class="keyword">int64</span></div><div class="line"><span class="keyword">uint</span> unit8 unit16 <span class="keyword">uint64</span> <span class="keyword">uintptr</span></div><div class="line"><span class="keyword">byte</span> <span class="comment">// uint8的别名</span></div><div class="line"><span class="keyword">float32</span> <span class="keyword">float64</span></div><div class="line"><span class="keyword">complex64</span> <span class="keyword">complex128</span></div></pre></td></tr></table></figure>
<p>声明变量并初始化<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> (</div><div class="line">    ToBe <span class="keyword">bool</span> = <span class="literal">false</span></div><div class="line">    MaxInt <span class="keyword">uint64</span> = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></div><div class="line">    z <span class="keyword">complex128</span> = cmplx.Sqrt(<span class="number">-5</span>+<span class="number">12i</span>)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>可以用这种方法定义枚举<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> (</div><div class="line">    <span class="built_in">red</span> = iota  <span class="comment">// red == 0</span></div><div class="line">    <span class="built_in">blue</span>        <span class="comment">// blue == 1</span></div><div class="line">    <span class="built_in">green</span>       <span class="comment">// green == 2</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<h3 id="7-结构体"><a href="#7-结构体" class="headerlink" title="7. 结构体"></a>7. 结构体</h3><p>使用<code>type</code>关键字定义结构体，Vertex是结构体的名称<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Vertex</span></span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">    X <span class="keyword">int</span></div><div class="line">    Y <span class="keyword">int</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="初始化结构体"><a href="#初始化结构体" class="headerlink" title="初始化结构体"></a>初始化结构体</h4><ul>
<li><p>v都是值对象，不是指针</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">v :</span>= Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</div><div class="line"><span class="string">v :</span>= Vertex&#123;<span class="string">X:</span> <span class="number">1</span>&#125; <span class="comment">//Y没有赋值，默认是0</span></div><div class="line"><span class="string">v :</span>= Vertex&#123;&#125;</div><div class="line">v.X = <span class="number">4</span></div><div class="line">fmt.Println(v.X)</div></pre></td></tr></table></figure>
</li>
<li><p>t是指针，Go是有指针的，但是没有指针运算</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> t *Vertex = <span class="built_in">new</span>(Vertex)</div><div class="line">t := <span class="built_in">new</span>(Vertex) </div><div class="line">t := &amp;Vertex&#123;&#125; <span class="comment">//t的类型是*Vertex</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="8-指针"><a href="#8-指针" class="headerlink" title="8. 指针"></a>8. 指针</h3><p>与C语言类似，Go是有指针的，但是没有指针运算<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">type Vertex struct &#123;</div><div class="line">    X, Y int</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span> := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">//p是值对象</span></div><div class="line"><span class="selector-tag">q</span> := &amp;<span class="selector-tag">p</span> <span class="comment">//&amp;取地址, q是指针</span></div><div class="line"><span class="selector-tag">q</span><span class="selector-class">.X</span> = <span class="number">1000</span></div><div class="line">fmt.Println(p)</div><div class="line">fmt.Println(*p) <span class="comment">//* 取值</span></div></pre></td></tr></table></figure></p>
<h3 id="9-map"><a href="#9-map" class="headerlink" title="9. map"></a>9. map</h3><pre><code>type Vertex struct { x, y int}
//m是变量名，string是key的类型，Vertex是value的类型
var m map[string]Vertex
</code></pre><p>初始化map是用make而不是new<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Vertex)</div><div class="line">m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123;<span class="string">"Bell Labs"</span> : Vertex&#123;<span class="number">40.12</span>, <span class="number">-34.56</span>&#125;,</div><div class="line">    <span class="string">"Go"</span> : Vertex&#123;<span class="number">37.43</span>, <span class="number">-123.45</span>&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>赋值<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">m[<span class="string">"GZ"</span>] = Vertex&#123;<span class="number">23.56</span>, <span class="number">56.23</span>&#125;</div></pre></td></tr></table></figure></p>
<p>删除，使用系统内置的delete方法<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">delete</span><span class="params">(m, <span class="string">"GZ"</span>)</span></span></div></pre></td></tr></table></figure></p>
<p>测试key是否存在,ok是true表示存在，是false表示不存在。<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elem, ok = m[<span class="string">"GZ"</span>]</div></pre></td></tr></table></figure></p>
<h3 id="10-Array-amp-Slice"><a href="#10-Array-amp-Slice" class="headerlink" title="10. Array &amp; Slice"></a>10. Array &amp; Slice</h3><p>Array是指包含同一类型的数据集合，数组中的元素必须是同一类型的，数组的长度要确定（无论是显式声明或者编译时计算确定），数组的长度定义好之后就不能修改了。<br>数组的声明：</p>
<pre><code>[1024]byte //长度为1024的数组
[10] *int64 //长度为10的指针数组
[3][4]int //二维数组
</code></pre><p>数组的长度可以用<code>len()</code>函数获取，len(array)。<br>数组的遍历<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for i, v<span class="keyword"> :</span>= range<span class="built_in"> array </span>&#123;</div><div class="line">    fmt.Println(<span class="string">"Array element["</span>, i, <span class="string">"]="</span>, v)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>数组是值类型的，当数组作为参数传递的时候是值传递。也就是在函数体中修改了传进来的数组参数，在函数体外不生效。要想在函数体外生效的话就用slice, slice就像是指向数组的指针。事实上slice的结构包括一个指向数组的指针、元素个数len、分配空间大小cap。<br>slice的创建,只是定义slice但是不初始化的话,slice是nil。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</div><div class="line"><span class="keyword">var</span> z []<span class="keyword">int</span> <span class="comment">//z == nil</span></div></pre></td></tr></table></figure></p>
<p>可以根据slice创建新的slice，创建形式是s[low:hight],元素包括low，不包hight,且low是从0开始计数。<br> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> := []int&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</div><div class="line">fmt.Println(<span class="string">"p[1:4] =="</span>, <span class="selector-tag">p</span>[<span class="number">1</span>:<span class="number">4</span>]) <span class="comment">//output: p[1:4] == [3 5 7]</span></div><div class="line">fmt.Println(<span class="string">"p[:3] =="</span>, <span class="selector-tag">p</span>[:<span class="number">3</span>]) <span class="comment">//output: p[:3] == [2 3 5]</span></div><div class="line">fmt.Println(<span class="string">"p[4:] =="</span>, <span class="selector-tag">p</span>[<span class="number">4</span>:]) <span class="comment">//output: p[4:] == [11 13]</span></div><div class="line">fmt.Println(<span class="string">"p[4:] =="</span>, <span class="selector-tag">p</span>[<span class="number">4</span>:<span class="number">4</span>]) <span class="comment">//output: p[4:4] == []</span></div></pre></td></tr></table></figure></p>
<p>也可以使用make()创建,make()创建的slice元素的初始值是0<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>) <span class="comment">//len(a)=5</span></div><div class="line">fmt.Println(<span class="string">"p == "</span>,p) <span class="comment">//output: p ==  [0 0 0 0 0]</span></div><div class="line">p := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">5</span>) <span class="comment">// len(p)=0, cap(p)=5</span></div></pre></td></tr></table></figure></p>
<p>Slice的增减元素，删除元素的话可以使用s[low:hight]创建新的slice，添加元素的话可以使用append()。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> := []int&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</div><div class="line"><span class="selector-tag">p</span> = append(<span class="selector-tag">p</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">pp := []int&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>&#125;</div><div class="line"><span class="selector-tag">p</span> = append(<span class="selector-tag">p</span>, pp...)</div></pre></td></tr></table></figure></p>
<p>append()是个不定参数，可以将1个或多个元素添加到slice，但是如果要将一个slice添加到另一个slice,作为第二个参数的slice后面必须添加”…”这样的3个点。如<code>p = append(p, pp...)</code>，否则会报错。</p>
<h3 id="11-switch"><a href="#11-switch" class="headerlink" title="11. switch"></a>11. switch</h3><p>switch是根据传入的条件不同，会按顺序选择执行不同的语句，如果没有条件满足就是执行default中的语句。<br>下面的例子是根据运行环境的不同打印出当前运行的是什么操作系统：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">"darwin"</span>:</div><div class="line">        fmt.Println(<span class="string">"OS X."</span>)</div><div class="line">    <span class="keyword">case</span> <span class="string">"linux"</span>:</div><div class="line">        fmt.Println(<span class="string">"Linux."</span>)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        fmt.Printf(<span class="string">"%s."</span>, os)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>switch也可以没有判断条件，这样的话就等效与if…else…<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">t := time.Now()</div><div class="line"><span class="keyword">switch</span> &#123;</div><div class="line">    <span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</div><div class="line">        fmt.Println(<span class="string">"Good morning!"</span>)</div><div class="line">    <span class="keyword">case</span> t.Hour() &lt; 25:</div><div class="line">        fmt.Println(<span class="string">"Good afternoon."</span>)</div><div class="line">        fallthrough</div><div class="line">    <span class="keyword">case</span> t.Hour() &lt; 25:</div><div class="line">        fmt.Println(<span class="string">"Good afternoon."</span>)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        fmt.Println(<span class="string">"Good evening."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>switch默认是选择到需要执行的语句之后，后面的语句是不会再进行判断执行的。但是可以使用<code>fallthrough</code>强制判断后面的语句是否需要执行。比如上面的例子会强制输出两次”Good afternoon.”。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Go与GAE开发环境配置]]></title>
      <url>http://wendyeq.me/2012/12/15/go-and-gae-env/</url>
      <content type="html"><![CDATA[<h2 id="Go源代码安装"><a href="#Go源代码安装" class="headerlink" title="Go源代码安装"></a>Go源代码安装</h2><p>Go源代码使用mercurial管理的所以先要安装mercurial, 常用的开源库一般都放在github.com，最好把git也安装上。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install mercurial git</div></pre></td></tr></table></figure></p>
<p>安装好版本管理工具之后就clone Go源码，然后运行all.bash安装。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hg clone -<span class="keyword">u</span> release http<span class="variable">s:</span>//code.google.<span class="keyword">com</span>/<span class="keyword">p</span>/<span class="keyword">go</span></div><div class="line"><span class="keyword">cd</span> <span class="keyword">go</span>/src</div><div class="line">./<span class="keyword">all</span>.bash</div></pre></td></tr></table></figure>
<p>运行完all.bash之后要设置相关的环境变量，在.profile （mint下面）或者.bash_profile （其他linux）里面加入如下代码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> GOOS=linux</div><div class="line"><span class="built_in">export</span> GOARCH=386 <span class="comment"># 32位是386, 64位是amd64</span></div><div class="line"><span class="built_in">export</span> GOROOT=<span class="variable">$HOME</span>/go <span class="comment"># 我的go目录是放在home的下面 </span></div><div class="line"><span class="built_in">export</span> GOBIN=<span class="variable">$GOROOT</span>/bin</div><div class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/Workspaces/iweb <span class="comment"># 指向工作目录而不是go安装目录 </span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOBIN</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>想加入的变量马上在当前的Terminal中生效可以运行<code>source .profile</code>,注意这只会在当前的命令行中生效。<br>编写Hello World！ 程序hello.go，运行<code>go run hello.go</code>验证是否正确输出结果。</p>
<p>到此Go环境就安装好了。</p>
<h2 id="GAE-for-Go安装"><a href="#GAE-for-Go安装" class="headerlink" title="GAE for Go安装"></a>GAE for Go安装</h2><p>到<a href="https://developers.google.com/appengine/downloads" target="_blank" rel="external">https://developers.google.com/appengine/downloads</a> 去下载Google App Engine SDK for go。 我下载的版本是go_appengine_sdk_linux_386-1.7.4.zip，使用<code>unzip go_appengine_sdk_linux_386-1.7.4.zip</code>解压。</p>
<p>配置相关的环境变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> GAEGO=<span class="variable">$HOME</span>/google_appengine</div><div class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/Workspaces/iweb:<span class="variable">$GAEGO</span>/goroot <span class="comment">#把GAE的环境变量放在这里是为了方便使用gocode对GAE的库进行代码提示。</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOBIN</span>:<span class="variable">$GAEGO</span> <span class="comment">#把GAEGO放到这里是为了方便使用appcfg.py和dev-server.py工具</span></div></pre></td></tr></table></figure></p>
<p>GAE也配置好了。</p>
<h2 id="开发工具Sublime-Text配置"><a href="#开发工具Sublime-Text配置" class="headerlink" title="开发工具Sublime Text配置"></a>开发工具Sublime Text配置</h2><p>具体的开发工具选择与配置，可以参考<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/1.4.md" target="_blank" rel="external">https://github.com/astaxie/build-web-application-with-golang/blob/master/1.4.md</a></p>
<p>Sublime Text2+GoSublime+gocode+MarGo组合使用能实现代码自动提示，保存时自动格式化代码，语法高亮，不过Sublime Text2在linux下不支持中文输入。</p>
<ol>
<li><p>安装gocode（需要先安装git）,无论是使用vim或者emace等编辑器，一般都是gocode作为代码自动提示的工具的。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> github.<span class="keyword">com</span>/nsf/gocode</div></pre></td></tr></table></figure>
</li>
<li><p>安装Margo</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> github.<span class="keyword">com</span>/DisposaBoy/MarGo</div></pre></td></tr></table></figure>
</li>
<li><p>安装Sublime Text2,可以去<a href="http://www.sublimetext.com/" target="_blank" rel="external">http://www.sublimetext.com/</a>下载最新版本解压，然后运行sublime_text,也可以使用apt-get安装。</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:webupd8team/sublime-text-2   </div><div class="line">sudo apt-get update  </div><div class="line">sudo apt-get install sublime-text</div></pre></td></tr></table></figure>
</li>
<li><p>安装Package Control,打开sublime-text,然后按Ctrl+`快捷键打开命令行，执行如下代码：</p>
<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2,<span class="built_in">os</span>; pf=<span class="string">'Package Control.sublime-package'</span>; ipp=sublime.installed_packages_path(); <span class="built_in">os</span>.makedirs(ipp) <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">os</span>.path.exists(ipp) <span class="keyword">else</span> None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(<span class="built_in">os</span>.path.join(ipp,pf),<span class="string">'wb'</span>).write(urllib2.urlopen(<span class="string">'http://sublime.wbond.net/'</span>+pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).read()); <span class="built_in">print</span> <span class="string">'Please restart Sublime Text to finish installation'</span></div></pre></td></tr></table></figure>
<p> 重启sublime-text就可以看到菜单中的Preferences-&gt; Package Control。</p>
</li>
<li><p>安装GoSublime,点击Package Control菜单或者按Ctril+Shift+p快捷键打开Package Control,输入pcip,按Enter键。输入GoSublime,按确定就开始安装了。同理应用于SidebarEnhancements和Go Build。安装完Go Build之后，在Tools-&gt; Build System中选择Automatic即可。按Ctrl+b可以直接编译运行，在最下面的Gsshell中输入<code>go build hello.go</code>或者<code>go run hello.go</code>测试编译运行。</p>
</li>
</ol>
<p><em>要对GAE的api进行代码提示GOPATH要如下设置：</em><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export GOPATH=<span class="variable">$HOME</span><span class="regexp">/Workspaces/i</span>web:<span class="variable">$GAEGO</span><span class="regexp">/goroot</span></div></pre></td></tr></table></figure></p>
<p>把个人的项目空间放在前面，GAE的goroot放在后面。因为使用go get安装第三方库的时候是把代码放到第一个GOPATH中，即$HOME/Workspaces/iweb，而不是放在go的安装目录或GAE的安装目录。</p>
<p>到目前为止Go的开发环境就配置好了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2011年总结]]></title>
      <url>http://wendyeq.me/2011/12/31/summary-of-2011/</url>
      <content type="html"><![CDATA[<p>这份2011年的总结是之前发到aws上ec2搭建的blog上的，后来由于ec2到期了，就把blog关了。现在又用google app engine重新搭建了个blog，就把这篇总结转过来。以下是原来的博文。</p>
<hr>
<p>2011年是一个特殊的年份，这一年我大学毕业，有了份工作。忙忙碌碌一年，也算有点收获，但仅仅是一点。回想起这一年做过的事情已经很多都记得不太清楚了，只记得毕业时的不舍和转正的紧张。经历的风浪还是太少了。</p>
<h3 id="经济方面"><a href="#经济方面" class="headerlink" title="经济方面"></a>经济方面</h3><ol>
<li><p>终于有了独立的经济能力了，可以乱花钱了。</p>
</li>
<li><p>买了第一只基金，亏了20%。幸好买了不多。不要乱信那些人说买基金的风险不大，事实上中国的基金经理都是SB来的，新股的发行价那么高了，还去买新股；管理层也是，每天的成交量那么低，还天天IPO，相当无语。买基金跟买股票差不多，你的钱就那么多，选中一只好的基金更选中一只好的股票的概率差不多。在整个环境都不好的情况下，基金也很难有什么好的收成。</p>
</li>
<li><p>买了第一只股票，在股票涨了10%的时候没有卖，贪心，跌10%的时候卖了，转买回自己公司的股票，公司的股票最近涨。股票方面整年算是持平，没赚也没亏。国内的股票还是不值得购买啊，我在A股和港股都选择了几只股票，观察了4个月，港股的振幅是最大的，有时候会跌很多，但是都会涨回来。A股不同，A股每天只跌一点点，几乎没涨过，4个月这样过来的话就跌了很多。</p>
</li>
<li><p>形成了一个好习惯，发工资的先存起一点钱，虽然钱不多，存在银行相对于通胀来说还是贬值了2%，但是人总要给自己留一条后路。</p>
</li>
</ol>
<h3 id="学习方面"><a href="#学习方面" class="headerlink" title="学习方面"></a>学习方面</h3><ol>
<li><p>制定了很多空泛的计划，没有一个完成的。</p>
</li>
<li><p>在扇贝网坚持打卡150天。</p>
</li>
<li><p>也看了几本书，仅仅是看了，还没在实际中应用。现在认真的回想起来，那些书我只是把每个字都看了，停留在知道的阶段，完全没有理解，还是浮躁了些。</p>
</li>
<li><p>业余编程语言从Python到Golang。</p>
</li>
</ol>
<h3 id="生活方面"><a href="#生活方面" class="headerlink" title="生活方面"></a>生活方面</h3><ol>
<li><p>每天都坚持锻炼身体。</p>
</li>
<li><p>每个星期好几天都是在外面吃，没有自己煮。</p>
</li>
<li><p>每周一都要挤很难才挤得上的地铁，每天花两个小时在上班的路上，每天坐10+个小时在电脑前。</p>
</li>
<li><p>单身，过完了2011的世纪光棍节，希望2012的光棍节不用再单身了。</p>
</li>
</ol>
<p>生活方面看上去一团糟的但是还是有很多开心的时候的，至少我还活着，但有些人已经由于过劳。。。</p>
<p><strong>稀里糊涂的2011过去了，迎接精彩的2012。</strong></p>
]]></content>
    </entry>
    
  
  
</search>
